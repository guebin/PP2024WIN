[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "파이썬을 이용한 통계자료분석",
    "section": "",
    "text": "이 강의들은 2023년 파이썬프로그래밍1, 2022년 데이터시각화2 수업을 바탕으로 작성되었습니다."
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "파이썬을 이용한 통계자료분석",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n학부 2학년1학기↩︎\n학부 2학년2학기↩︎"
  },
  {
    "objectID": "posts/Day3/ls14.html",
    "href": "posts/Day3/ls14.html",
    "title": "Lesson 14: 크롤링 + 시각화",
    "section": "",
    "text": "# !pip install yfinance\nimport numpy as np \nimport pandas as pd \nimport yfinance as yf"
  },
  {
    "objectID": "posts/Day3/ls14.html#a.-크롤링-데이터정리",
    "href": "posts/Day3/ls14.html#a.-크롤링-데이터정리",
    "title": "Lesson 14: 크롤링 + 시각화",
    "section": "A. 크롤링 + 데이터정리",
    "text": "A. 크롤링 + 데이터정리\n- yahoo finance: https://finance.yahoo.com/\nApple: 'AAPL'\n\n\n\nApple 코드\n\n\n삼성전자: '005930.KS'\n\n\n\n삼성전자 코드\n\n\n- 크롤링을 위한 코드\n\nsymbols = ['AMZN','AAPL','GOOG','MSFT','NFLX','NVDA','TSLA']\nstart = '2020-01-01'\nend = '2023-11-06'\ndf = yf.download(symbols,start,end)\ndf\n\n[                       0%%                      ][**************        29%%                      ]  2 of 7 completed[**************        29%%                      ]  2 of 7 completed[**********************57%%*                     ]  4 of 7 completed[**********************71%%********              ]  5 of 7 completed[**********************86%%***************       ]  6 of 7 completed[*********************100%%**********************]  7 of 7 completed\n\n\n\n\n\n\n\n\n\nAdj Close\nClose\n...\nOpen\nVolume\n\n\n\nAAPL\nAMZN\nGOOG\nMSFT\nNFLX\nNVDA\nTSLA\nAAPL\nAMZN\nGOOG\n...\nNFLX\nNVDA\nTSLA\nAAPL\nAMZN\nGOOG\nMSFT\nNFLX\nNVDA\nTSLA\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2020-01-02\n73.152664\n94.900497\n68.368500\n154.779541\n329.809998\n59.744045\n28.684000\n75.087502\n94.900497\n68.368500\n...\n326.100006\n59.687500\n28.299999\n135480400\n80580000\n28132000\n22622100\n4485800\n23753600\n142981500\n\n\n2020-01-03\n72.441452\n93.748497\n68.032997\n152.852264\n325.899994\n58.787781\n29.534000\n74.357498\n93.748497\n68.032997\n...\n326.779999\n58.775002\n29.366667\n146322800\n75288000\n23728000\n21116200\n3806900\n20538400\n266677500\n\n\n2020-01-06\n73.018692\n95.143997\n69.710503\n153.247314\n335.829987\n59.034321\n30.102667\n74.949997\n95.143997\n69.710503\n...\n323.119995\n58.080002\n29.364668\n118387200\n81236000\n34646000\n20813700\n5663100\n26263600\n151995000\n\n\n2020-01-07\n72.675278\n95.343002\n69.667000\n151.850082\n330.750000\n59.749020\n31.270666\n74.597504\n95.343002\n69.667000\n...\n336.470001\n59.549999\n30.760000\n108872000\n80898000\n30054000\n21634100\n4703200\n31485600\n268231500\n\n\n2020-01-08\n73.844353\n94.598503\n70.216003\n154.268799\n339.260010\n59.861088\n32.809334\n75.797501\n94.598503\n70.216003\n...\n331.489990\n59.939999\n31.580000\n132079200\n70160000\n30560000\n27746500\n7104500\n27710800\n467164500\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2023-10-30\n170.065933\n132.710007\n125.750000\n336.626770\n410.079987\n411.573792\n197.360001\n170.289993\n132.710007\n125.750000\n...\n402.350006\n410.869995\n209.279999\n51131000\n72485500\n24165600\n22828100\n5317100\n38802800\n136448200\n\n\n2023-10-31\n170.545319\n133.089996\n125.300003\n337.425140\n411.690002\n407.764130\n200.839996\n170.770004\n133.089996\n125.300003\n...\n409.239990\n404.500000\n196.119995\n44846000\n51589400\n21123400\n20265300\n3877600\n51796900\n118068300\n\n\n2023-11-01\n173.741104\n137.000000\n127.570000\n345.369019\n420.190002\n423.212799\n205.660004\n173.970001\n137.000000\n127.570000\n...\n414.769989\n408.839996\n204.039993\n56934900\n61529400\n26536600\n28158800\n4806100\n43759300\n121661700\n\n\n2023-11-02\n177.336380\n138.070007\n128.580002\n347.614471\n424.709991\n435.021759\n218.509995\n177.570007\n138.070007\n128.580002\n...\n421.170013\n433.279999\n212.970001\n77334800\n52236700\n24091700\n24348100\n4476000\n40917200\n125987600\n\n\n2023-11-03\n176.417572\n138.600006\n130.369995\n352.085388\n432.359985\n450.010406\n219.960007\n176.649994\n138.600006\n130.369995\n...\n428.760010\n440.200012\n221.149994\n79763700\n44007200\n19517900\n23624000\n3664800\n42385500\n119281000\n\n\n\n\n968 rows × 42 columns\n\n\n\n- 데이터를 살펴보자.\n\ndf.stack()\n\n\n\n\n\n\n\n\n\nAdj Close\nClose\nHigh\nLow\nOpen\nVolume\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n2020-01-02\nAAPL\n73.152664\n75.087502\n75.150002\n73.797501\n74.059998\n135480400\n\n\nAMZN\n94.900497\n94.900497\n94.900497\n93.207497\n93.750000\n80580000\n\n\nGOOG\n68.368500\n68.368500\n68.406998\n67.077499\n67.077499\n28132000\n\n\nMSFT\n154.779541\n160.619995\n160.729996\n158.330002\n158.779999\n22622100\n\n\nNFLX\n329.809998\n329.809998\n329.980011\n324.779999\n326.100006\n4485800\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2023-11-03\nGOOG\n130.369995\n130.369995\n130.729996\n129.009995\n129.089996\n19517900\n\n\nMSFT\n352.085388\n352.799988\n354.390015\n347.329987\n349.630005\n23624000\n\n\nNFLX\n432.359985\n432.359985\n434.820007\n425.529999\n428.760010\n3664800\n\n\nNVDA\n450.010406\n450.049988\n453.089996\n437.230011\n440.200012\n42385500\n\n\nTSLA\n219.960007\n219.960007\n226.369995\n218.399994\n221.149994\n119281000\n\n\n\n\n6776 rows × 6 columns"
  },
  {
    "objectID": "posts/Day3/ls14.html#b.-시각화",
    "href": "posts/Day3/ls14.html#b.-시각화",
    "title": "Lesson 14: 크롤링 + 시각화",
    "section": "B. 시각화",
    "text": "B. 시각화\n- tidydata를 생성\n\ndf.loc[:,'Adj Close'].stack().reset_index()\\\n.set_axis(['Date','Company','Price'],axis=1)\n\n\n\n\n\n\n\n\nDate\nCompany\nPrice\n\n\n\n\n0\n2020-01-02\nAAPL\n73.152664\n\n\n1\n2020-01-02\nAMZN\n94.900497\n\n\n2\n2020-01-02\nGOOG\n68.368500\n\n\n3\n2020-01-02\nMSFT\n154.779541\n\n\n4\n2020-01-02\nNFLX\n329.809998\n\n\n...\n...\n...\n...\n\n\n6771\n2023-11-03\nGOOG\n130.369995\n\n\n6772\n2023-11-03\nMSFT\n352.085388\n\n\n6773\n2023-11-03\nNFLX\n432.359985\n\n\n6774\n2023-11-03\nNVDA\n450.010406\n\n\n6775\n2023-11-03\nTSLA\n219.960007\n\n\n\n\n6776 rows × 3 columns\n\n\n\n- 바로 이어서 시각화! – x='Date', y='Price', color='Company'\n\ndf.loc[:,'Adj Close'].stack().reset_index()\\\n.set_axis(['Date','Company','Price'],axis=1)\\\n.plot.line(x='Date',y='Price',color='Company',backend='plotly')\n\n/home/cgb2/anaconda3/envs/r/lib/python3.10/site-packages/_plotly_utils/basevalidators.py:105: FutureWarning:\n\nThe behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result"
  },
  {
    "objectID": "posts/Day3/ls14.html#a.-크롤링-데이터정리-1",
    "href": "posts/Day3/ls14.html#a.-크롤링-데이터정리-1",
    "title": "Lesson 14: 크롤링 + 시각화",
    "section": "A. 크롤링 + 데이터정리",
    "text": "A. 크롤링 + 데이터정리\n- 대한민국의 저출산문제\nref: https://ko.wikipedia.org/wiki/대한민국의_저출산\n- 위의 url에서 5번째 테이블을 읽고싶다.\n\n5번째 테이블: 시도별 출생아 수\n\n\ndf_lst = pd.read_html('https://ko.wikipedia.org/wiki/%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD%EC%9D%98_%EC%A0%80%EC%B6%9C%EC%82%B0')\ndf = df_lst[4]\ndf\n\n\n\n\n\n\n\n\n지역/연도[6]\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n\n\n\n\n0\n서울\n93266\n91526\n93914.000\n84066.000\n83711.000\n83005\n75.536\n65389\n58074\n53.673\n47400\n45531\n\n\n1\n부산\n27415\n27759\n28673.000\n25831.000\n26190.000\n26645\n24906.000\n21480\n19152\n17049.000\n15100\n14446\n\n\n2\n대구\n20557\n20758\n21472.000\n19340.000\n19361.000\n19438\n18298.000\n15946\n14400\n13233.000\n11200\n10661\n\n\n3\n인천\n25752\n20758\n21472.000\n25560.000\n25786.000\n25491\n23609.000\n20445\n20087\n18522.000\n16000\n14947\n\n\n4\n광주\n13979\n13916\n14392.000\n12729.000\n12729.000\n12441\n11580.000\n10120\n9105\n8364.000\n7300\n7956\n\n\n5\n대전\n14314\n14808\n15279.000\n14099.000\n13962.000\n13774\n12436.000\n10851\n9337\n8410.000\n7500\n7414\n\n\n6\n울산\n11432\n11542\n12160.000\n11330.000\n11556.000\n11732\n10910.000\n9381\n8149\n7539.000\n6600\n6127\n\n\n7\n세종\n-\n-\n1054.000\n1111.000\n1344.000\n2708\n3297.000\n3504\n3703\n3819.000\n3500\n3570\n\n\n8\n경기\n121753\n122027\n124746.000\n112129.000\n112.169\n113495\n105643.000\n94088\n83198\n83.198\n77800\n76139\n\n\n9\n강원\n12477\n12408\n12426.000\n10980.000\n10662.000\n10929\n10058.000\n9958\n8351\n8283.000\n7800\n7357\n\n\n10\n충북\n14670\n14804\n15139.000\n13658.000\n13366.000\n13563\n12742.000\n11394\n10586\n9333.000\n8600\n8190\n\n\n11\n충남\n20.242\n20.398\n20.448\n18.628\n18200.000\n18604\n17302.000\n15670\n14380\n13228.000\n11900\n10984\n\n\n12\n전북\n16100\n16175\n16238.000\n14555.000\n14231.000\n14087\n12698.000\n11348\n10001\n8971.000\n8200\n7745\n\n\n13\n전남\n16654\n16612\n16990.000\n15401.000\n14817.000\n15061\n13980.000\n12354\n11238\n10832.000\n9700\n8430\n\n\n14\n경북\n23700\n24250\n24635.000\n22206.000\n22062.000\n22310\n20616.000\n17957\n16079\n14472.000\n12900\n12045\n\n\n15\n경남\n32203\n32536\n33211.000\n29504.000\n29763.000\n29537\n27138.000\n23849\n21224\n19250.000\n16800\n15562\n\n\n16\n제주\n5657\n5628\n5992.000\n5328.000\n5526.000\n5600\n5494.000\n5037\n4781\n4500.000\n4000\n3728\n\n\n17\n전국\n470171\n471265\n484550.000\n436455.000\n435435.000\n438420\n406243.000\n357771\n326822\n302676.000\n272400\n260562\n\n\n\n\n\n\n\n- '-'로 표현된 값을 0으로 처리하는게 좋겠음\n\ndf.rename({'지역/연도[6]':'지역'},axis=1)\\\n.set_index(['지역'])\\\n.applymap(lambda x: 0 if '-' in str(x) else float(x)).reset_index()\n\n/tmp/ipykernel_1310516/1737303492.py:3: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n\n\n\n\n\n\n\n지역\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n\n\n\n\n0\n서울\n93266.000\n91526.000\n93914.000\n84066.000\n83711.000\n83005.0\n75.536\n65389.0\n58074.0\n53.673\n47400.0\n45531.0\n\n\n1\n부산\n27415.000\n27759.000\n28673.000\n25831.000\n26190.000\n26645.0\n24906.000\n21480.0\n19152.0\n17049.000\n15100.0\n14446.0\n\n\n2\n대구\n20557.000\n20758.000\n21472.000\n19340.000\n19361.000\n19438.0\n18298.000\n15946.0\n14400.0\n13233.000\n11200.0\n10661.0\n\n\n3\n인천\n25752.000\n20758.000\n21472.000\n25560.000\n25786.000\n25491.0\n23609.000\n20445.0\n20087.0\n18522.000\n16000.0\n14947.0\n\n\n4\n광주\n13979.000\n13916.000\n14392.000\n12729.000\n12729.000\n12441.0\n11580.000\n10120.0\n9105.0\n8364.000\n7300.0\n7956.0\n\n\n5\n대전\n14314.000\n14808.000\n15279.000\n14099.000\n13962.000\n13774.0\n12436.000\n10851.0\n9337.0\n8410.000\n7500.0\n7414.0\n\n\n6\n울산\n11432.000\n11542.000\n12160.000\n11330.000\n11556.000\n11732.0\n10910.000\n9381.0\n8149.0\n7539.000\n6600.0\n6127.0\n\n\n7\n세종\n0.000\n0.000\n1054.000\n1111.000\n1344.000\n2708.0\n3297.000\n3504.0\n3703.0\n3819.000\n3500.0\n3570.0\n\n\n8\n경기\n121753.000\n122027.000\n124746.000\n112129.000\n112.169\n113495.0\n105643.000\n94088.0\n83198.0\n83.198\n77800.0\n76139.0\n\n\n9\n강원\n12477.000\n12408.000\n12426.000\n10980.000\n10662.000\n10929.0\n10058.000\n9958.0\n8351.0\n8283.000\n7800.0\n7357.0\n\n\n10\n충북\n14670.000\n14804.000\n15139.000\n13658.000\n13366.000\n13563.0\n12742.000\n11394.0\n10586.0\n9333.000\n8600.0\n8190.0\n\n\n11\n충남\n20.242\n20.398\n20.448\n18.628\n18200.000\n18604.0\n17302.000\n15670.0\n14380.0\n13228.000\n11900.0\n10984.0\n\n\n12\n전북\n16100.000\n16175.000\n16238.000\n14555.000\n14231.000\n14087.0\n12698.000\n11348.0\n10001.0\n8971.000\n8200.0\n7745.0\n\n\n13\n전남\n16654.000\n16612.000\n16990.000\n15401.000\n14817.000\n15061.0\n13980.000\n12354.0\n11238.0\n10832.000\n9700.0\n8430.0\n\n\n14\n경북\n23700.000\n24250.000\n24635.000\n22206.000\n22062.000\n22310.0\n20616.000\n17957.0\n16079.0\n14472.000\n12900.0\n12045.0\n\n\n15\n경남\n32203.000\n32536.000\n33211.000\n29504.000\n29763.000\n29537.0\n27138.000\n23849.0\n21224.0\n19250.000\n16800.0\n15562.0\n\n\n16\n제주\n5657.000\n5628.000\n5992.000\n5328.000\n5526.000\n5600.0\n5494.000\n5037.0\n4781.0\n4500.000\n4000.0\n3728.0\n\n\n17\n전국\n470171.000\n471265.000\n484550.000\n436455.000\n435435.000\n438420.0\n406243.000\n357771.0\n326822.0\n302676.000\n272400.0\n260562.0"
  },
  {
    "objectID": "posts/Day3/ls14.html#b.-시각화1-전국-출생아수-시각화",
    "href": "posts/Day3/ls14.html#b.-시각화1-전국-출생아수-시각화",
    "title": "Lesson 14: 크롤링 + 시각화",
    "section": "B. 시각화1: 전국 출생아수 시각화",
    "text": "B. 시각화1: 전국 출생아수 시각화\n- 전국으로 집계가 되어있던 정보를 남겨도 좋지만, groupy+agg 조합으로 새롭게 계산해보자.\n\ndf.rename({'지역/연도[6]':'지역'},axis=1)\\\n.set_index(['지역'])\\\n.applymap(lambda x: 0 if '-' in str(x) else float(x)).drop('전국')\\\n.stack().reset_index().rename({'level_1':'년도',0:'출생아수'},axis=1)\\\n.groupby('년도').agg({'출생아수':'sum'}).reset_index()\\\n.plot.line(x='년도',y='출생아수',backend='plotly')\n\n/tmp/ipykernel_1310516/1805618332.py:3: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead."
  },
  {
    "objectID": "posts/Day3/ls14.html#c.-시각화2-시도별-출생아수-시각화-line",
    "href": "posts/Day3/ls14.html#c.-시각화2-시도별-출생아수-시각화-line",
    "title": "Lesson 14: 크롤링 + 시각화",
    "section": "C. 시각화2: 시도별 출생아수 시각화 (line)",
    "text": "C. 시각화2: 시도별 출생아수 시각화 (line)\n\ndf.rename({'지역/연도[6]':'지역'},axis=1)\\\n.set_index(['지역'])\\\n.applymap(lambda x: 0 if '-' in str(x) else float(x)).drop('전국')\\\n.stack().reset_index().rename({'level_1':'년도',0:'출생아수'},axis=1)\\\n.plot.line(x='년도',y='출생아수',color='지역',backend='plotly')\n\n/tmp/ipykernel_1310516/277281482.py:3: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead."
  },
  {
    "objectID": "posts/Day3/ls14.html#d.-시각화3-시도별-출생아수-시각화-area",
    "href": "posts/Day3/ls14.html#d.-시각화3-시도별-출생아수-시각화-area",
    "title": "Lesson 14: 크롤링 + 시각화",
    "section": "D. 시각화3: 시도별 출생아수 시각화 (area)",
    "text": "D. 시각화3: 시도별 출생아수 시각화 (area)\n- 시각화1,시각화2의 정보가 적절히 혼합되어있는 시각화는 없을까?\n\ndf.rename({'지역/연도[6]':'지역'},axis=1)\\\n.set_index(['지역'])\\\n.applymap(lambda x: 0 if '-' in str(x) else float(x)).drop('전국')\\\n.stack().reset_index().rename({'level_1':'년도',0:'출생아수'},axis=1)\\\n.plot.area(x='년도',y='출생아수',color='지역',backend='plotly')\n\n/tmp/ipykernel_1310516/70633050.py:3: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n                                                \n\n\n\n기묘하다..\n\n- 해석: 2014년 경기, 2016년 서울, 2019년 경기에 애를 낳지 않는다.\n- 데이터와 비교\n\ndf\n\n\n\n\n\n\n\n\n지역/연도[6]\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n\n\n\n\n0\n서울\n93266\n91526\n93914.000\n84066.000\n83711.000\n83005\n75.536\n65389\n58074\n53.673\n47400\n45531\n\n\n1\n부산\n27415\n27759\n28673.000\n25831.000\n26190.000\n26645\n24906.000\n21480\n19152\n17049.000\n15100\n14446\n\n\n2\n대구\n20557\n20758\n21472.000\n19340.000\n19361.000\n19438\n18298.000\n15946\n14400\n13233.000\n11200\n10661\n\n\n3\n인천\n25752\n20758\n21472.000\n25560.000\n25786.000\n25491\n23609.000\n20445\n20087\n18522.000\n16000\n14947\n\n\n4\n광주\n13979\n13916\n14392.000\n12729.000\n12729.000\n12441\n11580.000\n10120\n9105\n8364.000\n7300\n7956\n\n\n5\n대전\n14314\n14808\n15279.000\n14099.000\n13962.000\n13774\n12436.000\n10851\n9337\n8410.000\n7500\n7414\n\n\n6\n울산\n11432\n11542\n12160.000\n11330.000\n11556.000\n11732\n10910.000\n9381\n8149\n7539.000\n6600\n6127\n\n\n7\n세종\n-\n-\n1054.000\n1111.000\n1344.000\n2708\n3297.000\n3504\n3703\n3819.000\n3500\n3570\n\n\n8\n경기\n121753\n122027\n124746.000\n112129.000\n112.169\n113495\n105643.000\n94088\n83198\n83.198\n77800\n76139\n\n\n9\n강원\n12477\n12408\n12426.000\n10980.000\n10662.000\n10929\n10058.000\n9958\n8351\n8283.000\n7800\n7357\n\n\n10\n충북\n14670\n14804\n15139.000\n13658.000\n13366.000\n13563\n12742.000\n11394\n10586\n9333.000\n8600\n8190\n\n\n11\n충남\n20.242\n20.398\n20.448\n18.628\n18200.000\n18604\n17302.000\n15670\n14380\n13228.000\n11900\n10984\n\n\n12\n전북\n16100\n16175\n16238.000\n14555.000\n14231.000\n14087\n12698.000\n11348\n10001\n8971.000\n8200\n7745\n\n\n13\n전남\n16654\n16612\n16990.000\n15401.000\n14817.000\n15061\n13980.000\n12354\n11238\n10832.000\n9700\n8430\n\n\n14\n경북\n23700\n24250\n24635.000\n22206.000\n22062.000\n22310\n20616.000\n17957\n16079\n14472.000\n12900\n12045\n\n\n15\n경남\n32203\n32536\n33211.000\n29504.000\n29763.000\n29537\n27138.000\n23849\n21224\n19250.000\n16800\n15562\n\n\n16\n제주\n5657\n5628\n5992.000\n5328.000\n5526.000\n5600\n5494.000\n5037\n4781\n4500.000\n4000\n3728\n\n\n17\n전국\n470171\n471265\n484550.000\n436455.000\n435435.000\n438420\n406243.000\n357771\n326822\n302676.000\n272400\n260562"
  },
  {
    "objectID": "posts/Day3/ls14.html#e.-시각화123-수정",
    "href": "posts/Day3/ls14.html#e.-시각화123-수정",
    "title": "Lesson 14: 크롤링 + 시각화",
    "section": "E. 시각화1,2,3 수정",
    "text": "E. 시각화1,2,3 수정\n- 시각화1의 수정\n\ndf.rename({'지역/연도[6]':'지역'},axis=1)\\\n.set_index(['지역'])\\\n.applymap(lambda x: 0 if '-' in str(x) else float(x)).drop('전국')\\\n.applymap(lambda x: x*1000 if x&lt;1000 else x)\\\n.stack().reset_index().rename({'level_1':'년도',0:'출생아수'},axis=1)\\\n.groupby('년도').agg({'출생아수':'sum'}).reset_index()\\\n.plot.line(x='년도',y='출생아수',backend='plotly')\n\n/tmp/ipykernel_1310516/1274971694.py:3: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n/tmp/ipykernel_1310516/1274971694.py:4: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n                                                \n\n\n- 시각화2의 수정\n\ndf.rename({'지역/연도[6]':'지역'},axis=1)\\\n.set_index(['지역'])\\\n.applymap(lambda x: 0 if '-' in str(x) else float(x)).drop('전국')\\\n.applymap(lambda x: x*1000 if x&lt;1000 else x)\\\n.stack().reset_index().rename({'level_1':'년도',0:'출생아수'},axis=1)\\\n.plot.line(x='년도',y='출생아수',color='지역',backend='plotly')\n\n/tmp/ipykernel_1310516/1526382732.py:3: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n/tmp/ipykernel_1310516/1526382732.py:4: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n                                                \n\n\n- 시각화3의 수정\n\ndf.rename({'지역/연도[6]':'지역'},axis=1)\\\n.set_index(['지역'])\\\n.applymap(lambda x: 0 if '-' in str(x) else float(x)).drop('전국')\\\n.applymap(lambda x: x*1000 if x&lt;1000 else x)\\\n.stack().reset_index().rename({'level_1':'년도',0:'출생아수'},axis=1)\\\n.plot.area(x='년도',y='출생아수',color='지역',backend='plotly')\n\n/tmp/ipykernel_1310516/3339566067.py:3: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n/tmp/ipykernel_1310516/3339566067.py:4: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead."
  },
  {
    "objectID": "posts/Day3/ls16.html",
    "href": "posts/Day3/ls16.html",
    "title": "Lesson 16: 지리정보 시각화",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n#---#\nimport plotly.express as px\nimport json \nimport requests"
  },
  {
    "objectID": "posts/Day3/ls16.html#a.-데이터-불러오기",
    "href": "posts/Day3/ls16.html#a.-데이터-불러오기",
    "title": "Lesson 16: 지리정보 시각화",
    "section": "A. 데이터 불러오기",
    "text": "A. 데이터 불러오기\n\nglobal_dict = json.loads(requests.get('https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-provinces-2018-geo.json').text)\nlocal_dict = json.loads(requests.get('https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-municipalities-2018-geo.json').text)\n#--#\nurl = 'https://raw.githubusercontent.com/guebin/DV2022/main/posts/Energy/{}.csv'\nprov = ['Seoul', 'Busan', 'Daegu', 'Incheon', \n        'Gwangju', 'Daejeon', 'Ulsan', 'Sejongsi', \n        'Gyeonggi-do', 'Gangwon-do', 'Chungcheongbuk-do', \n        'Chungcheongnam-do', 'Jeollabuk-do', 'Jeollanam-do', \n        'Gyeongsangbuk-do', 'Gyeongsangnam-do', 'Jeju-do']\ndf = pd.concat([pd.read_csv(url.format(p+y)).assign(년도=y, 시도=p) for p in prov for y in ['2018', '2019', '2020', '2021']]).reset_index(drop=True)\\\n.assign(년도 = lambda df: df.년도.astype(int))\\\n.set_index(['년도','시도','지역']).applymap(lambda x: int(str(x).replace(',','')))\\\n.reset_index()\ndf.head()\n\n/tmp/ipykernel_1310337/712135142.py:12: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n\n\n\n\n\n\n\n년도\n시도\n지역\n건물동수\n연면적\n에너지사용량(TOE)/전기\n에너지사용량(TOE)/도시가스\n에너지사용량(TOE)/지역난방\n\n\n\n\n0\n2018\nSeoul\n종로구\n17929\n9141777\n64818\n82015\n111\n\n\n1\n2018\nSeoul\n중구\n10598\n10056233\n81672\n75260\n563\n\n\n2\n2018\nSeoul\n용산구\n17201\n10639652\n52659\n85220\n12043\n\n\n3\n2018\nSeoul\n성동구\n14180\n11631770\n60559\n107416\n0\n\n\n4\n2018\nSeoul\n광진구\n21520\n12054796\n70609\n130308\n0"
  },
  {
    "objectID": "posts/Day3/ls16.html#b.-데이터정리",
    "href": "posts/Day3/ls16.html#b.-데이터정리",
    "title": "Lesson 16: 지리정보 시각화",
    "section": "B. 데이터정리",
    "text": "B. 데이터정리\n(1) global_dict 내의 영어이름과 df의 영어이름이 일치하는지 확인\n\nset(df.시도) == {l['properties']['name_eng'] for l in global_dict['features']}\n\nTrue\n\n\n(2) global_dict내의 영어이름과 한글이름을 이용해 변환을 위한 dictionary 생성\n\n{l['properties']['name_eng']:l['properties']['name'] for l in global_dict['features']}\n\n{'Seoul': '서울특별시',\n 'Busan': '부산광역시',\n 'Daegu': '대구광역시',\n 'Incheon': '인천광역시',\n 'Gwangju': '광주광역시',\n 'Daejeon': '대전광역시',\n 'Ulsan': '울산광역시',\n 'Sejongsi': '세종특별자치시',\n 'Gyeonggi-do': '경기도',\n 'Gangwon-do': '강원도',\n 'Chungcheongbuk-do': '충청북도',\n 'Chungcheongnam-do': '충청남도',\n 'Jeollabuk-do': '전라북도',\n 'Jeollanam-do': '전라남도',\n 'Gyeongsangbuk-do': '경상북도',\n 'Gyeongsangnam-do': '경상남도',\n 'Jeju-do': '제주특별자치도'}\n\n\n(3) df에 변환을 수행하여 영어지명을 한글지명으로 변환\n\ndf.assign(\n    시도 = lambda df: df.시도.map({l['properties']['name_eng']:l['properties']['name'] for l in global_dict['features']})\n)\n\n\n\n\n\n\n\n\n년도\n시도\n지역\n건물동수\n연면적\n에너지사용량(TOE)/전기\n에너지사용량(TOE)/도시가스\n에너지사용량(TOE)/지역난방\n\n\n\n\n0\n2018\n서울특별시\n종로구\n17929\n9141777\n64818\n82015\n111\n\n\n1\n2018\n서울특별시\n중구\n10598\n10056233\n81672\n75260\n563\n\n\n2\n2018\n서울특별시\n용산구\n17201\n10639652\n52659\n85220\n12043\n\n\n3\n2018\n서울특별시\n성동구\n14180\n11631770\n60559\n107416\n0\n\n\n4\n2018\n서울특별시\n광진구\n21520\n12054796\n70609\n130308\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n995\n2019\n제주특별자치도\n서귀포시\n34729\n7233931\n34641\n1306\n0\n\n\n996\n2020\n제주특별자치도\n제주시\n66504\n19819923\n99212\n22179\n0\n\n\n997\n2020\n제주특별자치도\n서귀포시\n34880\n7330040\n35510\n1639\n0\n\n\n998\n2021\n제주특별자치도\n제주시\n67053\n20275738\n103217\n25689\n0\n\n\n999\n2021\n제주특별자치도\n서귀포시\n35230\n7512206\n37884\n2641\n0\n\n\n\n\n1000 rows × 8 columns\n\n\n\n(4) local_dict와 global_dict의 지명정보를 정리하여 데이터프레임으로 만듦\n# 예비학습\n\npd.DataFrame(\n    [{'X':100,'y':0},\n     {'X':101,'y':1}]\n)    \n\n\n\n\n\n\n\n\nX\ny\n\n\n\n\n0\n100\n0\n\n\n1\n101\n1\n\n\n\n\n\n\n\n#\n\ndf_global = pd.DataFrame([l['properties'] for l in global_dict['features']])\ndf_global\n\n\n\n\n\n\n\n\nname\nbase_year\nname_eng\ncode\n\n\n\n\n0\n서울특별시\n2018\nSeoul\n11\n\n\n1\n부산광역시\n2018\nBusan\n21\n\n\n2\n대구광역시\n2018\nDaegu\n22\n\n\n3\n인천광역시\n2018\nIncheon\n23\n\n\n4\n광주광역시\n2018\nGwangju\n24\n\n\n5\n대전광역시\n2018\nDaejeon\n25\n\n\n6\n울산광역시\n2018\nUlsan\n26\n\n\n7\n세종특별자치시\n2018\nSejongsi\n29\n\n\n8\n경기도\n2018\nGyeonggi-do\n31\n\n\n9\n강원도\n2018\nGangwon-do\n32\n\n\n10\n충청북도\n2018\nChungcheongbuk-do\n33\n\n\n11\n충청남도\n2018\nChungcheongnam-do\n34\n\n\n12\n전라북도\n2018\nJeollabuk-do\n35\n\n\n13\n전라남도\n2018\nJeollanam-do\n36\n\n\n14\n경상북도\n2018\nGyeongsangbuk-do\n37\n\n\n15\n경상남도\n2018\nGyeongsangnam-do\n38\n\n\n16\n제주특별자치도\n2018\nJeju-do\n39\n\n\n\n\n\n\n\n\ndf_local = pd.DataFrame([l['properties'] for l in local_dict['features']])\ndf_local\n\n\n\n\n\n\n\n\nname\nbase_year\nname_eng\ncode\n\n\n\n\n0\n종로구\n2018\nJongno-gu\n11010\n\n\n1\n중구\n2018\nJung-gu\n11020\n\n\n2\n용산구\n2018\nYongsan-gu\n11030\n\n\n3\n성동구\n2018\nSeongdong-gu\n11040\n\n\n4\n광진구\n2018\nGwangjin-gu\n11050\n\n\n...\n...\n...\n...\n...\n\n\n245\n함양군\n2018\nHamyang-gun\n38380\n\n\n246\n거창군\n2018\nGeochang-gun\n38390\n\n\n247\n합천군\n2018\nHapcheon-gun\n38400\n\n\n248\n제주시\n2018\nJeju-si\n39010\n\n\n249\n서귀포시\n2018\nSeogwipo-si\n39020\n\n\n\n\n250 rows × 4 columns\n\n\n\n(5) df_local에서 “전주시완산구”와 같이 정리된 지명들을 “완산구”로 변환\n\ndf_local.set_index('name')\\\n.rename(\n    {name:name.split('시')[-1] for name in df_local['name'] if ('시' in name) and ('구' in name) and (len(name)&gt;3)}\n).reset_index()\n\n\n\n\n\n\n\n\nname\nbase_year\nname_eng\ncode\n\n\n\n\n0\n종로구\n2018\nJongno-gu\n11010\n\n\n1\n중구\n2018\nJung-gu\n11020\n\n\n2\n용산구\n2018\nYongsan-gu\n11030\n\n\n3\n성동구\n2018\nSeongdong-gu\n11040\n\n\n4\n광진구\n2018\nGwangjin-gu\n11050\n\n\n...\n...\n...\n...\n...\n\n\n245\n함양군\n2018\nHamyang-gun\n38380\n\n\n246\n거창군\n2018\nGeochang-gun\n38390\n\n\n247\n합천군\n2018\nHapcheon-gun\n38400\n\n\n248\n제주시\n2018\nJeju-si\n39010\n\n\n249\n서귀포시\n2018\nSeogwipo-si\n39020\n\n\n\n\n250 rows × 4 columns\n\n\n\n(6) df_local과 df_global의 정보를 정리하여 merge, 합쳐진 정보를 df_json에 저장\n\ndf_json = df_local.set_index('name')\\\n.rename(\n    {name:name.split('시')[-1] for name in df_local['name'] if ('시' in name) and ('구' in name) and (len(name)&gt;3)}\n).reset_index()\\\n.drop(['base_year','name_eng'],axis=1)\\\n.rename({'name':'name_local','code':'code_local'},axis=1)\\\n.assign(code = lambda df: df['code_local'].str[:2])\\\n.merge(df_global.drop(['base_year','name_eng'],axis=1))\ndf_json\n\n\n\n\n\n\n\n\nname_local\ncode_local\ncode\nname\n\n\n\n\n0\n종로구\n11010\n11\n서울특별시\n\n\n1\n중구\n11020\n11\n서울특별시\n\n\n2\n용산구\n11030\n11\n서울특별시\n\n\n3\n성동구\n11040\n11\n서울특별시\n\n\n4\n광진구\n11050\n11\n서울특별시\n\n\n...\n...\n...\n...\n...\n\n\n245\n함양군\n38380\n38\n경상남도\n\n\n246\n거창군\n38390\n38\n경상남도\n\n\n247\n합천군\n38400\n38\n경상남도\n\n\n248\n제주시\n39010\n39\n제주특별자치도\n\n\n249\n서귀포시\n39020\n39\n제주특별자치도\n\n\n\n\n250 rows × 4 columns\n\n\n\n(7) df_json과 df의 정보를 merge하기 위하여 ’서울특별시-종로구’와 같은 형식으로 공통열을 각각 생성. 생성된 공통열의 원소가 일치하는지 비교\n\ndf_left = df.assign(\n    시도 = lambda df: df.시도.map({l['properties']['name_eng']:l['properties']['name'] for l in global_dict['features']})\n).assign(on = lambda df: df.시도 + '-' + df.지역)\ndf_left\n\n\n\n\n\n\n\n\n년도\n시도\n지역\n건물동수\n연면적\n에너지사용량(TOE)/전기\n에너지사용량(TOE)/도시가스\n에너지사용량(TOE)/지역난방\non\n\n\n\n\n0\n2018\n서울특별시\n종로구\n17929\n9141777\n64818\n82015\n111\n서울특별시-종로구\n\n\n1\n2018\n서울특별시\n중구\n10598\n10056233\n81672\n75260\n563\n서울특별시-중구\n\n\n2\n2018\n서울특별시\n용산구\n17201\n10639652\n52659\n85220\n12043\n서울특별시-용산구\n\n\n3\n2018\n서울특별시\n성동구\n14180\n11631770\n60559\n107416\n0\n서울특별시-성동구\n\n\n4\n2018\n서울특별시\n광진구\n21520\n12054796\n70609\n130308\n0\n서울특별시-광진구\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n995\n2019\n제주특별자치도\n서귀포시\n34729\n7233931\n34641\n1306\n0\n제주특별자치도-서귀포시\n\n\n996\n2020\n제주특별자치도\n제주시\n66504\n19819923\n99212\n22179\n0\n제주특별자치도-제주시\n\n\n997\n2020\n제주특별자치도\n서귀포시\n34880\n7330040\n35510\n1639\n0\n제주특별자치도-서귀포시\n\n\n998\n2021\n제주특별자치도\n제주시\n67053\n20275738\n103217\n25689\n0\n제주특별자치도-제주시\n\n\n999\n2021\n제주특별자치도\n서귀포시\n35230\n7512206\n37884\n2641\n0\n제주특별자치도-서귀포시\n\n\n\n\n1000 rows × 9 columns\n\n\n\n\ndf_right = df_json.assign(on = lambda df: df.name + '-' + df.name_local)\\\n.drop(['name_local','name'],axis=1)\ndf_right\n\n\n\n\n\n\n\n\ncode_local\ncode\non\n\n\n\n\n0\n11010\n11\n서울특별시-종로구\n\n\n1\n11020\n11\n서울특별시-중구\n\n\n2\n11030\n11\n서울특별시-용산구\n\n\n3\n11040\n11\n서울특별시-성동구\n\n\n4\n11050\n11\n서울특별시-광진구\n\n\n...\n...\n...\n...\n\n\n245\n38380\n38\n경상남도-함양군\n\n\n246\n38390\n38\n경상남도-거창군\n\n\n247\n38400\n38\n경상남도-합천군\n\n\n248\n39010\n39\n제주특별자치도-제주시\n\n\n249\n39020\n39\n제주특별자치도-서귀포시\n\n\n\n\n250 rows × 3 columns\n\n\n\n\nset(df_left.on) == set(df_right.on)\n\nFalse\n\n\n\nset(df_right.on) - set(df_left.on)\n\n{'인천광역시-남구'}\n\n\n\nset(df_left.on) - set(df_right.on)\n\n{'인천광역시-미추홀구'}\n\n\n(8) 아래의 기사를 살펴보고 지역명을 적절히 변환\n\n\nhttps://www.hani.co.kr/arti/area/area_general/834359.html\n\n\ndf_right.set_index('on')\\\n.rename({'인천광역시-남구':'인천광역시-미추홀구'})\\\n.reset_index()\n\n\n\n\n\n\n\n\non\ncode_local\ncode\n\n\n\n\n0\n서울특별시-종로구\n11010\n11\n\n\n1\n서울특별시-중구\n11020\n11\n\n\n2\n서울특별시-용산구\n11030\n11\n\n\n3\n서울특별시-성동구\n11040\n11\n\n\n4\n서울특별시-광진구\n11050\n11\n\n\n...\n...\n...\n...\n\n\n245\n경상남도-함양군\n38380\n38\n\n\n246\n경상남도-거창군\n38390\n38\n\n\n247\n경상남도-합천군\n38400\n38\n\n\n248\n제주특별자치도-제주시\n39010\n39\n\n\n249\n제주특별자치도-서귀포시\n39020\n39\n\n\n\n\n250 rows × 3 columns\n\n\n\n(9) 데이터프레임을 결합\n\ndf2 = df_left.merge(\n    df_right.set_index('on')\\\n    .rename({'인천광역시-남구':'인천광역시-미추홀구'})\\\n    .reset_index()\n).drop(['on'],axis=1)"
  },
  {
    "objectID": "posts/Day3/ls16.html#c.-시각화-2018년도-전기에너지-사용량",
    "href": "posts/Day3/ls16.html#c.-시각화-2018년도-전기에너지-사용량",
    "title": "Lesson 16: 지리정보 시각화",
    "section": "C. 시각화 (2018년도 전기에너지 사용량)",
    "text": "C. 시각화 (2018년도 전기에너지 사용량)\n\ndf2\n\n\n\n\n\n\n\n\n년도\n시도\n지역\n건물동수\n연면적\n에너지사용량(TOE)/전기\n에너지사용량(TOE)/도시가스\n에너지사용량(TOE)/지역난방\ncode_local\ncode\n\n\n\n\n0\n2018\n서울특별시\n종로구\n17929\n9141777\n64818\n82015\n111\n11010\n11\n\n\n1\n2019\n서울특별시\n종로구\n17851\n9204140\n63492\n76653\n799\n11010\n11\n\n\n2\n2020\n서울특별시\n종로구\n17638\n9148895\n60123\n71263\n912\n11010\n11\n\n\n3\n2021\n서울특별시\n종로구\n22845\n18551145\n125179\n117061\n0\n11010\n11\n\n\n4\n2018\n서울특별시\n중구\n10598\n10056233\n81672\n75260\n563\n11020\n11\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n995\n2021\n제주특별자치도\n제주시\n67053\n20275738\n103217\n25689\n0\n39010\n39\n\n\n996\n2018\n제주특별자치도\n서귀포시\n34154\n6914685\n34470\n1597\n0\n39020\n39\n\n\n997\n2019\n제주특별자치도\n서귀포시\n34729\n7233931\n34641\n1306\n0\n39020\n39\n\n\n998\n2020\n제주특별자치도\n서귀포시\n34880\n7330040\n35510\n1639\n0\n39020\n39\n\n\n999\n2021\n제주특별자치도\n서귀포시\n35230\n7512206\n37884\n2641\n0\n39020\n39\n\n\n\n\n1000 rows × 10 columns\n\n\n\n\npx.choropleth_mapbox(\n    geojson = local_dict,\n    featureidkey = 'properties.code',\n    data_frame = df2.query('년도 == 2018'),\n    locations = 'code_local',\n    color = '에너지사용량(TOE)/전기',\n    hover_data = ['시도','지역'],\n    #---#\n    mapbox_style=\"carto-positron\",\n    center={\"lat\": 36, \"lon\": 127.5}, \n    zoom=6,\n    height=800,\n    width=800    \n)"
  },
  {
    "objectID": "posts/Day3/ls16.html#d.-시각화-20182021년도-전기에너지-사용량",
    "href": "posts/Day3/ls16.html#d.-시각화-20182021년도-전기에너지-사용량",
    "title": "Lesson 16: 지리정보 시각화",
    "section": "D. 시각화 (2018~2021년도 전기에너지 사용량)",
    "text": "D. 시각화 (2018~2021년도 전기에너지 사용량)\n\nseoul_dict = local_dict.copy() \nseoul_dict['features'] = [l for l in seoul_dict['features'] if l['properties']['code'][:2] == '11']\n\n\npx.choropleth_mapbox(\n    geojson = seoul_dict,\n    featureidkey = 'properties.code',\n    data_frame = df2,\n    locations = 'code_local',\n    color = '에너지사용량(TOE)/전기',\n    animation_frame= '년도',\n    hover_data = ['시도','지역'],\n    #---#\n    mapbox_style=\"carto-positron\",\n    range_color = [0,400000],\n    center={\"lat\": 37.5642135, \"lon\": 127.0016985},\n    zoom=9,\n    height=500,\n    width=700    \n)"
  },
  {
    "objectID": "posts/Day3/ls12.html#a.-시각화1-전체합격률-시각화-pandas-초보",
    "href": "posts/Day3/ls12.html#a.-시각화1-전체합격률-시각화-pandas-초보",
    "title": "Lesson 12: 심슨의 역설",
    "section": "A. 시각화1: 전체합격률 시각화 – pandas 초보",
    "text": "A. 시각화1: 전체합격률 시각화 – pandas 초보\n- 여성지원자의 합격률\n\ndf.pivot_table(index='gender',columns='result',values='count',aggfunc='sum')\\\n.assign(total = lambda df: df['fail']+df['pass'])\\\n.assign(rate = lambda df: df['pass']/df['total'])\n\n\n\n\n\n\n\nresult\nfail\npass\ntotal\nrate\n\n\ngender\n\n\n\n\n\n\n\n\nfemale\n1063\n772\n1835\n0.420708\n\n\nmale\n1291\n1400\n2691\n0.520253\n\n\n\n\n\n\n\n\ndf.query('gender == \"female\" and result ==\"pass\"')['count'].sum() / df.query('gender == \"female\"')['count'].sum()\n\n0.420708446866485\n\n\n- 남성지원자의 합격률\n\ndf.query('gender == \"male\" and result ==\"pass\"')['count'].sum() / df.query('gender == \"male\"')['count'].sum()\n\n0.5202526941657376\n\n\n- 시각화\n\ntidydata = pd.DataFrame({'sex':['male','female'],'rate':[0.5202526941657376,0.420708446866485]})\ntidydata\n\n\n\n\n\n\n\n\nsex\nrate\n\n\n\n\n0\nmale\n0.520253\n\n\n1\nfemale\n0.420708\n\n\n\n\n\n\n\n\nfig = ggplot(tidydata)\ncol = geom_col(aes(x='sex',y='rate',fill='sex'))\nfig + col"
  },
  {
    "objectID": "posts/Day3/ls12.html#b.-시각화1-전체합격률-시각화-pandas-고수",
    "href": "posts/Day3/ls12.html#b.-시각화1-전체합격률-시각화-pandas-고수",
    "title": "Lesson 12: 심슨의 역설",
    "section": "B. 시각화1: 전체합격률 시각화 – pandas 고수",
    "text": "B. 시각화1: 전체합격률 시각화 – pandas 고수\n\ntidydata = df.pivot_table(index='gender', columns='result', values='count', aggfunc=sum)\\\n.assign(rate = lambda df: df['pass'] / (df['fail'] + df['pass']))\\\n.reset_index()\n\nfig = ggplot(tidydata) \ncol = geom_col(aes(x='gender',y='rate',fill='gender'))\nfig + col \n\n/tmp/ipykernel_1307301/2552015845.py:1: FutureWarning: The provided callable &lt;built-in function sum&gt; is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead."
  },
  {
    "objectID": "posts/Day1/ls03.html#컴프리헨션의-이해",
    "href": "posts/Day1/ls03.html#컴프리헨션의-이해",
    "title": "Lesson 03: 파이썬 자료형 심화개념",
    "section": "컴프리헨션의 이해",
    "text": "컴프리헨션의 이해\n- 리스트 컴프리헨션을 이해하기 전에 for문에 대하여 알아보자.\n[예비학습] for문 벼락치기\n프로그램안에서 반복해서 무엇인가를 하고싶다 \\(\\to\\) for\n\nfor i in [0,1,2,3]: ## 반복실행계획\n    print(i) ## 반복실행할내용, 탭을이용하여 들여쓰기해야한다. \n\n0\n1\n2\n3\n\n\n(예제) 1,2,3,4의 합을 for문을 이용하여 구해보자.\n\n_sum = 0 \nfor i in [1,2,3,4]:\n    _sum = _sum + i\n\n\n_sum = 0\ni=1 \n_sum = _sum + i ## 1 &lt;= 0+1\ni=2\n_sum = _sum + i ## 3 &lt;= 1+2 \ni=3 \n_sum = _sum + i ## 6 &lt;= 3+3\ni=4\n_sum = _sum + i ## 10 &lt;= 6+4 \n\n\n_sum\n\n10\n\n\n예비학습끝\n- 예제: \\(2^0, 2^1, 2^2, 2^3\\)를 원소로 가지는 리스트를 생성하라.\n(풀이1) 직접입력\n\nx= [2**0, 2**1, 2**2, 2**3] \nx\n\n[1, 2, 4, 8]\n\n\n(풀이2) for문을 이용함\n\nx=[] \nfor i in [0,1,2,3]:\n    x.append(2**i) \n\n\nx\n\n[1, 2, 4, 8]\n\n\n(풀이3) for문을 이용함\n\nx=[] \nfor i in [0,1,2,3]:\n    x = x+[2**i]\n\n\nx\n\n[1, 2, 4, 8]\n\n\n(풀이4) for문을 이용함\n\nx=[] \nfor i in [0,1,2,3]:\n    x += [2**i]\n\n\nx\n\n[1, 2, 4, 8]\n\n\n(풀이5) 리스트컴프리헨션을 이용한 풀이\n\nx= [2**i for i in [0,1,2,3]] \nx\n\n[1, 2, 4, 8]\n\n\n- 리스트컴프리헨션의 문법 암기방법\n\n집합에서 조건제시법을 연상\n\\(\\{2^0,2^1,2^2,2^3\\}=\\{2^i: \\text{ for } i = 0,1,2,3 \\}\\)\n\n- 리스트컴프리헨션이란?\n\n리스트를 매우 효율적으로 만드는 테크닉\nfor문에 비하여 가지고 있는 장점: (1) 코드가 간결하다 (2) 빠르다\n\n- 예제: 리스트 컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n['SSSS','PPPP','AAAA','MMMM']\n\n['SSSS', 'PPPP', 'AAAA', 'MMMM']\n\n\n(풀이)\n\n[i*4 for i in 'SPAM']\n\n['SSSS', 'PPPP', 'AAAA', 'MMMM']\n\n\n- 예제: 리스트컴프리헨션을 이용하여 아래와 같은 리스트를 만들어라.\n\n['X1','X2','X3','Y1','Y2','Y3']\n\n['X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3']\n\n\n(풀이)\n\n[i+j for i in 'XY' for j in '123']\n\n['X1', 'X2', 'X3', 'Y1', 'Y2', 'Y3']\n\n\n- 예제: 리스트컴프리헨션을 이용하여 통계1,…,통계5,수학1,…,수학5를 만들어라.\n(풀이)\n\n[x+y for x in ['stat','math'] for y in '12345'] \n\n['stat1',\n 'stat2',\n 'stat3',\n 'stat4',\n 'stat5',\n 'math1',\n 'math2',\n 'math3',\n 'math4',\n 'math5']\n\n\n\n\\(\\{x+y : x \\in \\{{\\tt stat},{\\tt math}\\}, y \\in \\{1,2,3,4,5\\} \\}\\)\n\n(다른풀이) 참고로 for문을 쓰면 좀 복잡해진다.\n\n_lst = [] \nfor x in ['stat','math']: \n    for y in '12345': \n        _lst = _lst + [x+y] \n\n\n_lst \n\n['stat1',\n 'stat2',\n 'stat3',\n 'stat4',\n 'stat5',\n 'math1',\n 'math2',\n 'math3',\n 'math4',\n 'math5']\n\n\n- 예제: ’jbnu’를 이용하여 아래와 같은 리스트를 만들어라. (리스트컴프리헨션을 이용할것)\n\n['j','b','n','u']\n\n['j', 'b', 'n', 'u']\n\n\n(다른풀이) 아래와 같이 풀면 된다는것은 알고 있음\n\nlist('jbnu')\n\n['j', 'b', 'n', 'u']\n\n\n(풀이)\n\n[x for x in 'jbnu']\n\n['j', 'b', 'n', 'u']\n\n\n- 예제: [X1,X2,X3,…,X12]와 같은 리스트를 만들어보라.\n(풀이)\n\n['X'+str(i) for i in range(1,13)] \n\n['X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10', 'X11', 'X12']"
  },
  {
    "objectID": "posts/Day1/ls03.html#if문이-포함된-컴프리헨션",
    "href": "posts/Day1/ls03.html#if문이-포함된-컴프리헨션",
    "title": "Lesson 03: 파이썬 자료형 심화개념",
    "section": "if문이 포함된 컴프리헨션",
    "text": "if문이 포함된 컴프리헨션\n- 예제: 제곱수중에서 12로 나누어 떨어지는 수만 원소로 가지는 리스트를 만들고 싶다.\n\n제곱수: 1,4,9,16,25,36, …\n12로 나누어 떨어지는 수: 36, …\n\n(예비학습)\n\n12 % 4 # %는 나머지를 계산하는 연산자, 12를 4로 나누면 나머지가 0\n\n0\n\n\n\n12 % 5 # %는 나머지를 계산하는 연산자, 12를 5로 나누면 나머지가 2\n\n2\n\n\n(풀이1)\n\nlst = [] \nfor i in range(1,101): \n    if (i**2 % 12 == 0): \n        lst.append(i**2)\n\n\nlst\n\n[36,\n 144,\n 324,\n 576,\n 900,\n 1296,\n 1764,\n 2304,\n 2916,\n 3600,\n 4356,\n 5184,\n 6084,\n 7056,\n 8100,\n 9216]\n\n\n(풀이2)\n\n[i**2 for i in range(1,101) if (i**2 % 12 == 0)]\n\n[36,\n 144,\n 324,\n 576,\n 900,\n 1296,\n 1764,\n 2304,\n 2916,\n 3600,\n 4356,\n 5184,\n 6084,\n 7056,\n 8100,\n 9216]"
  },
  {
    "objectID": "posts/Day1/ls03.html#튜플을-왜-쓰지-1",
    "href": "posts/Day1/ls03.html#튜플을-왜-쓰지-1",
    "title": "Lesson 03: 파이썬 자료형 심화개념",
    "section": "튜플을 왜 쓰지? (1)",
    "text": "튜플을 왜 쓰지? (1)\n그냥 리스트를 쓰면 되는거 아닌가 하는 생각이 듭니다. 그냥 튜플은 값이 바뀌지 않는 리스트 느낌. 이게 왜 쓸모있지?\n\n책의설명: 코딩을 하다보면 값을 바꾸지 말아야 할 것을 실수로 값을 바꾸는 경우가 있음. 이런 실수를 방지할 수 있다.\nshallow copy/deep copy 에 대한 개념을 모르면 생기는 여러가지 side effect이 있음. 이러한 side effect을 막을 수 있는 무기임."
  },
  {
    "objectID": "posts/Day1/ls03.html#상황1-다중출력",
    "href": "posts/Day1/ls03.html#상황1-다중출력",
    "title": "Lesson 03: 파이썬 자료형 심화개념",
    "section": "상황1: 다중출력(?)",
    "text": "상황1: 다중출력(?)\n- 예제: 여러변수를 동시에 출력하고 싶을 경우 (다중출력?)\n변수를 아래와 같이 선언하였다고 하자.\n\na=1\nb=2\nc=3 \n\n\na,b,c\n\n(1, 2, 3)\n\n\n선언된 값을 확인하려면?\n\na\n\n1\n\n\n\nb\n\n2\n\n\n\nc\n\n3\n\n\n튜플을 이용하면?\n\na,b,c # 괄호하나 생략하는것이 이렇게 편하다..\n\n(1, 2, 3)"
  },
  {
    "objectID": "posts/Day1/ls03.html#상황2-다중할당",
    "href": "posts/Day1/ls03.html#상황2-다중할당",
    "title": "Lesson 03: 파이썬 자료형 심화개념",
    "section": "상황2: 다중할당",
    "text": "상황2: 다중할당\n- 예제: 다중할당1 (여러개의 변수를 동시에 선언하고 싶을 경우)\n\nname, age, sex, height, weight = 'Tom', 20, 'M', 180, 70 \n\n\nname, age, sex, height, weight\n\n('Tom', 20, 'M', 180, 70)\n\n\n\nheight\n\n180\n\n\n- 예제: 다중할당2, 위도와 경도\n\ncoor = (37,127) # 서울 \ncoor\n\n(37, 127)\n\n\n\nlat, lon = coor\n\n\nlat \n\n37\n\n\n\nlon\n\n127\n\n\n- 잠깐만: 다중할당은 꼭 튜플에서만 가능한가?\n그건 아니다…\n\n[x,y,z] = [1,2,3] \nx,y,z # 다중출력 \n\n(1, 2, 3)\n\n\n\n[x,y] = 'hi'\nx,y \n\n('h', 'i')\n\n\n튜플과 같이 사용하면 가독성이 극대화 (그래서 다중할당은 거의 튜플과 세트로 사용함)\n\nx,y,z = 1,2,3\nx,y,z # 다중출력 \n\n(1, 2, 3)\n\n\n\nx,y = 'hi'\nx,y \n\n('h', 'i')"
  },
  {
    "objectID": "posts/Day1/ls03.html#상황3-변수값을-교환",
    "href": "posts/Day1/ls03.html#상황3-변수값을-교환",
    "title": "Lesson 03: 파이썬 자료형 심화개념",
    "section": "상황3: 변수값을 교환",
    "text": "상황3: 변수값을 교환\n- 예제: 임시변수 사용없이 두 변수의 값을 교환\n\na=10\nb=20\n\n\na,b = b,a \n\n\na\n\n20\n\n\n\nb\n\n10"
  },
  {
    "objectID": "posts/Day1/ls03.html#상황4-for문과-함께",
    "href": "posts/Day1/ls03.html#상황4-for문과-함께",
    "title": "Lesson 03: 파이썬 자료형 심화개념",
    "section": "상황4: for문과 함께",
    "text": "상황4: for문과 함께\n- 예제: for문과 튜플\n\nlst = [['guebin', 202112345, 'M'],\n       ['iu',202254321, 'F'],\n       ['hodong', 202011223, 'M']]\nlst\n\n[['guebin', 202112345, 'M'],\n ['iu', 202254321, 'F'],\n ['hodong', 202011223, 'M']]\n\n\n\nfor i in lst: \n    print(i)\n\n['guebin', 202112345, 'M']\n['iu', 202254321, 'F']\n['hodong', 202011223, 'M']\n\n\n\nfor name,studentid,sex in lst: \n    print(name)\n\nguebin\niu\nhodong\n\n\n\nfor name,studentid,sex in lst: \n    print(name,sex)\n\nguebin M\niu F\nhodong M\n\n\n- 예제: for문과 튜플, dummy variable _\n\nfor name,studentid,sex in lst: \n    print(studentid)\n\n202112345\n202254321\n202011223\n\n\n\nfor _,studentid,_ in lst: \n    print(studentid)\n\n202112345\n202254321\n202011223\n\n\n\nfor _,_,sex in lst: \n    print(sex)\n\nM\nF\nM\n\n\n\nfor name,_,sex in lst: \n    print(name,sex)\n\nguebin M\niu F\nhodong M\n\n\n- 예제: for문과 튜플, * 연산자\n(motive)\n\nfor name,_,_  in lst: \n    print(name)\n\nguebin\niu\nhodong\n\n\n\n귀찮냐..\n\n(신기술)\n\nfor name,*args in lst:\n    print(name)\n\nguebin\niu\nhodong"
  },
  {
    "objectID": "posts/Day1/ls01.html#선언",
    "href": "posts/Day1/ls01.html#선언",
    "title": "Lesson 01: 파이썬의 자료형 I (int, float, bool, str)",
    "section": "선언",
    "text": "선언\n\na='guebin'\n\n\na\n\n'guebin'"
  },
  {
    "objectID": "posts/Day1/ls01.html#연산",
    "href": "posts/Day1/ls01.html#연산",
    "title": "Lesson 01: 파이썬의 자료형 I (int, float, bool, str)",
    "section": "연산",
    "text": "연산\n- 더하기(+)연산\n\na='X'\nb='2'\n\n\nc=a+b\nc\n\n'X2'\n\n\n- 빼기(-)연산\n\na='X2'\nb='2'\na-b\n\nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\n\n\n이런건 없다.\n\n- 곱하기(*)연산\n\na='X'\n\n\na+a+a\n\n'XXX'\n\n\n\na*3 # a*3 = a+a+a = 'X'+'X+'X'\n\n'XXX'\n\n\n아래도 가능하다.\n\n3*a\n\n'XXX'\n\n\n그리고 아래도 가능하다.\n\na='X'\nb=3 \na*b\n\n'XXX'\n\n\n대신에 의미상 맞지 않는 것은 수행되지 않고 에러가 난다.\n\na='X'\nb='Y'\na+b\n\n'XY'\n\n\n\na*b\n\nTypeError: can't multiply sequence by non-int of type 'str'\n\n\n- 나눗셈(/)연산\n\na='XX'\n\n\na/2\n\nTypeError: unsupported operand type(s) for /: 'str' and 'int'\n\n\n\n이런건 없다.."
  },
  {
    "objectID": "posts/Day1/ls01.html#인덱싱",
    "href": "posts/Day1/ls01.html#인덱싱",
    "title": "Lesson 01: 파이썬의 자료형 I (int, float, bool, str)",
    "section": "인덱싱",
    "text": "인덱싱\n- str은 하나의 벡터 문자가 여러개 있는 형태라고 생각하면 된다.\n\na='guebin'\n\n\na\n\n'guebin'\n\n\n\n6개의 칸에 글씨가 하나씩 들어가 있음.\n\n- 대괄호 []안에 숫자를 넣는 방식으로 벡터의 원소를 호출할 수 있다. (주의: 인덱스가 0부터 시작함)\n\na[0] #첫번째원소\n\n'g'\n\n\n\na[1] #두번째원소 \n\n'u'\n\n\n마지막원소는 -1로 호출할 수도 있다.\n\na[-1]\n\n'n'\n\n\n마지막에서 2번째 원소는 -2로 호출가능하다.\n\na[-2]\n\n'i'\n\n\n- 요약하면 아래와 같은 방식으로 호출가능함.\n\n\n\ng\nu\ne\nb\ni\nn\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n-6\n-5\n-4\n-3\n-2\n-1\n\n\n\n\na[4]\n\n'i'\n\n\n\na[-2]\n\n'i'\n\n\n\na[-4]\n\n'e'\n\n\n- :을 이용하여 여러개의 원소를 호출할 수 있음.\n\na='guebin'\n\n\na[0:3] # a[0],a[1],a[2],a[3]이 아니라 a[0],a[1],a[2]까지만 뽑힌다. 즉 마지막의 3은 호출되지 않는다. \n\n'gue'\n\n\n\na[1:3] # a[1], a[2] 만 호출 // start=1,  stop=3 \n\n'ue'\n\n\nindex=1부터 시작해서 마지막원소까지 호출하려면?\n\na[5] # guebin의 마지막원소 'n'이 출려 \n\n'n'\n\n\n\na[1:5] # 5는 포함되지 않으므로 틀림\n\n'uebi'\n\n\n\na[1:6] # 정답\n\n'uebin'\n\n\n안 헷갈리는 방법은 없을까?\n\na[-1]\n\n'n'\n\n\n\na[1:-1] # 이것은 결국 (a[1:5]와 같은 것임) \n\n'uebi'\n\n\n해결책? 생략한다!!\n\na[1:]\n\n'uebin'\n\n\n\na\n\n'guebin'\n\n\n- 생략의 응용1\n\na='k-pop' \na\n\n'k-pop'\n\n\n\na[2:5]\n\n'pop'\n\n\n\na[2:]\n\n'pop'\n\n\n- 생략의 응용2\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[0:2] # a[0],a[1]\n\n'k-'\n\n\n\na[:2] # a[0],a[1] \n\n'k-'\n\n\n- 생략의 응용3\n\na='k-pop'\na\n\n'k-pop'\n\n\n\na[0:5] # a[0],...,a[4]\n\n'k-pop'\n\n\n\na[:]\n\n'k-pop'"
  },
  {
    "objectID": "posts/Day1/ls01.html#str-특수기능",
    "href": "posts/Day1/ls01.html#str-특수기능",
    "title": "Lesson 01: 파이썬의 자료형 I (int, float, bool, str)",
    "section": "str 특수기능",
    "text": "str 특수기능\n\na='guebin'\na\n\n'guebin'\n\n\n\na=3.14\n\n- 파이썬의 변수는 단순히 정보를 담는 그릇이 아니다. 유용한 기능을 제공하는 경우가 있다.\n\na='ABCD' # a라는 변수는 'ABCD'라는 정보를 담는 그릇의 역할만 하지 않고, 특화된 어떠한 기능도 제공한다. \na\n\n'ABCD'\n\n\n\na.lower() # a.lower()를 쓰면 a의 모든 문자를 소문자로 바꾸는 기능을 제공, lower(a)라고 읽자!\n\n'abcd'\n\n\n여기에서 lower()는 문자열에 특화된 기능임. 따라서 당연히 아래는 불가능\n\na=3.14\na.lower() # lower(a)\n\nAttributeError: 'float' object has no attribute 'lower'\n\n\n- 자료형에 특화된 기능(=함수)을 확인하는 방법? a.+ tab 으로 목록 확인 가능\n\na='guebin'\n\n\na.upper?\n\n\nSignature: a.upper()\nDocstring: Return a copy of the string converted to uppercase.\nType:      builtin_function_or_method\n\n\n\n\n\na.upper() # upper(a) \n\n'GUEBIN'\n\n\n\na.capitalize() # capitalize(a) \n\n'Guebin'\n\n\n- 마음의눈: a.f() 형태를 읽는 팁\n\na.f()는 f(a)로 생각하면 편리함.\na.f(2)는 f(a,2)로 생각하면 편리함.\n\n0차원 vs 1차원\n- len함수 소개: 원소의 갯수를 알려주는 함수.\n\na='guebin'\n\n\nlen(a)\n\n6\n\n\n(0차원) len 함수가 동작하지 않음.\n\na=3.14\n\n\nlen(a)\n\nTypeError: object of type 'float' has no len()\n\n\n\nb=True\n\n\nlen(b)\n\nTypeError: object of type 'bool' has no len()\n\n\n(1차원) len 함수가 잘 동작함.\n\na='3.14'\nlen(a)\n\n4\n\n\n\nb=[1,2,3]\n\n\nlen(b)\n\n3"
  },
  {
    "objectID": "posts/Day2/ls07.html#열의-선택",
    "href": "posts/Day2/ls07.html#열의-선택",
    "title": "Lesson 07: pandas I",
    "section": "열의 선택",
    "text": "열의 선택\n- 방법1: df.? + str\n- 방법2: df[?] + str, [str,str]\n\n# df['att'] # str \n# df[['att']] # [str]\n# df[['att','rep']] # [str,str]\n\n- 방법3: df.iloc[:,?] + int, int:int, [int,int], [bool,bool], range\n\n# df.iloc[:,0] # int\n# df.iloc[:,-2:] # int:int - 슬라이싱\n# df.iloc[:,1::2] # int:int - 스트라이딩\n# df.iloc[:,[0]] # [int]\n# df.iloc[:,[0,1]] # [int,int]\n# df.iloc[:,[True,True,False,False]] # bool의 list \n# df.iloc[:,range(2)] # range\n\n- 방법4: df.loc[:,?] + str, ‘str:str’, [str,str], [bool,bool]\n\n# df.loc[:,'att'] # str\n# df.loc[:,'rep':'mid'] # 'str':'str' -- 칼럼이름으로 슬라이싱 **\n# df.loc[:,'rep'::2] # 'str':'str' -- 칼럼이름으로 스트라이딩 ** \n# df.loc[:,['att']] # [str]\n# df.loc[:,['att','rep']] # [str,str]\n# df.loc[:,[True,False,False,True]] # bool의 list"
  },
  {
    "objectID": "posts/Day2/ls07.html#행의-선택",
    "href": "posts/Day2/ls07.html#행의-선택",
    "title": "Lesson 07: pandas I",
    "section": "행의 선택",
    "text": "행의 선택\n- 방법1: df[] + int:int, str:str, [bool,bool], pd.Series([bool,bool]) – \\((\\star\\star\\star\\star\\star)\\)\n\n# df[:2] # int:int -- 슬라이싱 // df.iloc[:2,:], df.iloc[:2] 와 같음\n# df[0:5:2] # int:int -- 스트라이딩 \n# df[:'2022-12312'] # str:str -- 슬라이싱 // df.loc[:'2022-12312'], df.loc[:'2022-12312',:] 와 같음\n# df[:'2022-12312':2] # str:str -- 스트라이딩\n# df[list(df.att &lt; 70)] # [bool,bool]\n# df[df.att &lt; 70] # pd.Series([bool,bool])\n\n- 방법2: df.iloc[], df.iloc[,:] + int, int:int, [int,int], [bool,bool], range\n\n# df.iloc[0] # int \n# df.iloc[-2:] # int:int -- 슬라이싱\n# df.iloc[1::2] # int:int -- 스트라이딩\n# df.iloc[[0]] # [int]\n# df.iloc[[0,1]] # [int,int]\n# df.iloc[[True]+[False]*19] # [bool,bool]\n# df.iloc[range(2)] # range\n\n\n# df.iloc[0,:] # int \n# df.iloc[-2:,:] # int:int -- 슬라이싱\n# df.iloc[1::2,:] # int:int -- 스트라이딩\n# df.iloc[[0],:] # [int]\n# df.iloc[[0,1],:] # [int,int]\n# df.iloc[[True]+[False]*19,:] # [bool,bool]\n# df.iloc[range(2),:] # range\n\n- 방법3: df.loc[], df.loc[,:] + int, str, int:int, str:str, [int,int], [str,str], [bool,bool], pd.Series([bool,bool])\n\n# df2.loc[0] # int \n# df.loc['2022-12380'] # str \n# df2.loc[:2] # int:int \n# df.loc[:'2022-12363'] # str:str \n# df2.loc[[0,1]] # [int,int]\n# df.loc[['2022-12380','2022-12370']] # [str,str]\n# df.loc[[True]+[False]*19] # [bool,bool]\n# df.loc[df.att&gt;70] # pd.Series([bool,bool]) \n\n\n# df2.loc[0,:] # int \n# df.loc['2022-12380',:] # str \n# df2.loc[:2,:] # int:int \n# df.loc[:'2022-12363',:] # str:str \n# df2.loc[[0,1],:] # [int,int]\n# df.loc[['2022-12380','2022-12370'],:] # [str,str]\n# df.loc[[True]+[False]*19,:] # [bool,bool]\n# df.loc[df.att&gt;70,:] # pd.Series([bool,bool])"
  },
  {
    "objectID": "posts/Day2/ls07.html#요약",
    "href": "posts/Day2/ls07.html#요약",
    "title": "Lesson 07: pandas I",
    "section": "요약",
    "text": "요약\n- 알아두면 좋은 규칙\n\n.iloc[] 와 .iloc[,:]는 완전히 동등하다.\n.loc[] 와 .loc[,:]는 완전히 동등하다.\n\n- 정리\n\n\n\ntype of indexer\ntarget\n.\n[]\n.iloc\n.loc\ncomment\n\n\n\n\nint\nrow\nX\nX\nO\n\\(\\Delta\\)\n\n\n\nint\ncol\nX\nX\nO\nX\n\n\n\nstr\nrow\nX\nX\nX\nO\n\n\n\nstr\ncol\nO\nO\nX\nO\n\n\n\nint:int\nrow\nX\nO\nO\n\\(\\Delta\\)\n\n\n\nint:int\ncol\nX\nX\nO\nX\n\n\n\nstr:str\nrow\nX\nO\nX\nO\n\n\n\nstr:str\ncol\nX\nX\nX\nO\n\n\n\n[int,int]\nrow\nX\nX\nO\n\\(\\Delta\\)\n\n\n\n[int,int]\ncol\nX\nX\nO\nX\n\n\n\n[str,str]\nrow\nX\nX\nX\nO\n\n\n\n[str,str]\ncol\nX\nO\nX\nO\n\n\n\n[bool,bool]\nrow\nX\nO\nO\nO\n\n\n\n[bool,bool]\ncol\nX\nX\nO\nO\n\n\n\npd.Series([bool,bool])\nrow\nX\nO\nX\nO"
  },
  {
    "objectID": "posts/Day2/ls07.html#제-스타일",
    "href": "posts/Day2/ls07.html#제-스타일",
    "title": "Lesson 07: pandas I",
    "section": "제 스타일",
    "text": "제 스타일\n- 가장 안전한 코드\n\n# df.loc[:,:]\n\n- 상황1: 하나의 col을 뽑으려 할때 좋은 코드\n\n# df.att # 최애 \n# df['att'] # 차애 \n# df[['att']] # 차애의 대안\n\n- 상황2: row 슬라이싱을 할때 좋은 코드 \\((\\star\\star\\star)\\)\n\n# df[:5] # 최애, df.iloc[:5]와 같다. \n# df[:'2022-12312'] # 차애, df.loc[:'2022-12312'] 와 같다\n\n- 상황3: 조건에 맞는 row를 뽑을때 좋은 코드\n\n# df[df.att&lt;60] # 최애\n# df[[att&lt;60 for att in df.att]] # 차애\n\n- 상황4: 하나의 row를 뽑으려 할때 좋은 코드\n\n# df.loc[0] # 최애\n# df.iloc[0] # 최애 \n# df.loc[[0]] # 최애의 대안\n# df.iloc[[0]] # 최애의 대안\n\n- 상황5: (row,col)을 뽑으려 할때 좋은 코드\n\n# 방법1: pd.Series를 뽑고 -&gt; 인덱스로접근\n# df.att[0]\n# df['att'][0]\n\n# 방법2: iloc, loc 으로 한번에 뽑기\n# df.iloc[0,0]\n# df.loc[0,'att']\n\n위의 상황이외에는 df.loc[:,:]를 사용하는것이 유리하다\n- 상황6: column 슬라이싱을 할때\n\n# df.loc[:,'att':'mid'] # 끝점포함\n\n- 상황7: row + column 슬라이싱을 하는 가장 좋은 코드\n\n# df.loc[0:5,'att':'mid']\n\n- 상황8: 조건에 맞는 col을 뽑기에 가장 좋은 코드\n\n# df.loc[:,[len(col_name)&gt;2 for col_name in df.columns]]\n\n- 상황9: 조건에 맞는 row, col을 뽑기에 가장 좋은 코드\n\n# df.loc[df.att&lt;60,[len(col_name)&gt;2 for col_name in df.columns]]"
  },
  {
    "objectID": "posts/Day2/ls07.html#제-스타일-x",
    "href": "posts/Day2/ls07.html#제-스타일-x",
    "title": "Lesson 07: pandas I",
    "section": "제 스타일 X",
    "text": "제 스타일 X\n- 제가 안쓰는 코드1\n\ndf[:1]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n0\n65\n55\n50\n40\n\n\n\n\n\n\n\n이러면 내 입장에서는 마치 아래가 동작할 것 같잖아..\n\ndf[0]\n\nKeyError: 0\n\n\n- 제가 안쓰는 코드2: bool의 list를 사용할때 iloc은 가급적 쓰지마세요\n\ndf.iloc[list(df['att']&lt;80),:]\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\n\n\n\n\n0\n65\n55\n50\n40\n\n\n2\n65\n90\n60\n30\n\n\n3\n55\n80\n75\n80\n\n\n5\n75\n40\n100\n15\n\n\n6\n65\n45\n45\n90\n\n\n7\n60\n60\n25\n0\n\n\n10\n55\n75\n35\n25\n\n\n13\n50\n80\n40\n30\n\n\n14\n50\n55\n15\n85\n\n\n16\n50\n50\n45\n10\n\n\n17\n65\n55\n15\n45\n\n\n18\n70\n70\n40\n35\n\n\n\n\n\n\n\n이러면 마치 아래도 동작할 것 같잖아..\n\ndf.iloc[df['att']&lt;80,:]\n\nValueError: Location based indexing can only have [integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types"
  },
  {
    "objectID": "posts/Day2/ls06.html#np.concatenate",
    "href": "posts/Day2/ls06.html#np.concatenate",
    "title": "Lesson 06: numpy II",
    "section": "np.concatenate",
    "text": "np.concatenate\n- 기본예제\n\na=np.array([1,2]) \nb=-a\n\n\nnp.array(list(a) +list(b))\n\narray([ 1,  2, -1, -2])\n\n\n\nnp.concatenate([a,b])\n\narray([ 1,  2, -1, -2])\n\n\n- 응용\n\na=np.array([1,2])\nb=-a \nc=np.array([3,4,5])\n\n\nnp.concatenate([a,b,c])\n\narray([ 1,  2, -1, -2,  3,  4,  5])\n\n\n\n여기까진 딱히 칸캐터네이트의 메리트가 없어보임\n리스트였다면 a+b+c 하면 되는 기능이니까?\n\n- 2d array에 적용해보자.\n\na=np.arange(4).reshape(2,2) \nb=-a\n\n\nnp.concatenate([a,b]) \n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 0, -1],\n       [-2, -3]])\n\n\n- 옆으로 붙일려면?\n\nnp.concatenate([a,b],axis=1)\n\narray([[ 0,  1,  0, -1],\n       [ 2,  3, -2, -3]])\n\n\n- 위의 코드에서 axis=1 이 뭐지? axis=0,2 등을 치면 결과가 어떻게 될까?\n\nnp.concatenate([a,b],axis=0)\n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 0, -1],\n       [-2, -3]])\n\n\n\n이건 그냥 np.concatenate([a,b])와 같다.\nnp.concatenate([a,b])는 np.concatenate([a,b],axis=0)의 생략버전이군?\n\n\nnp.concatenate([a,b],axis=2)\n\nAxisError: axis 2 is out of bounds for array of dimension 2\n\n\n\n이런건 없다.\n\n- axis의 의미가 뭔지 궁금함. 좀 더 예제를 살펴보자.\n\na=np.array(range(2*3*4)).reshape(2,3,4)\na\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n\n\n\nb=-a\nb\n\narray([[[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\nnp.concatenate([a,b],axis=0) \n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]],\n\n       [[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\nnp.concatenate([a,b],axis=1) \n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11],\n        [  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23],\n        [-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\nnp.concatenate([a,b],axis=2) \n\narray([[[  0,   1,   2,   3,   0,  -1,  -2,  -3],\n        [  4,   5,   6,   7,  -4,  -5,  -6,  -7],\n        [  8,   9,  10,  11,  -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15, -12, -13, -14, -15],\n        [ 16,  17,  18,  19, -16, -17, -18, -19],\n        [ 20,  21,  22,  23, -20, -21, -22, -23]]])\n\n\n\n이번에는 axis=2까지 된다?\n\n\nnp.concatenate([a,b],axis=3) \n\nAxisError: axis 3 is out of bounds for array of dimension 3\n\n\n\naxis=3까지는 안된다?\n\n- 뭔가 나름의 방식으로 합쳐지는데 원리가 뭘까?\n(분석1) np.concatenate([a,b],axis=0)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=0).shape\n\n((2, 3, 4), (2, 3, 4), (4, 3, 4))\n\n\n\n첫번째차원이 바뀌었다 =&gt; 첫번째 축이 바뀌었다 =&gt; axis=0 (파이썬은 0부터 시작하니까!)\n\n(분석2) np.concatenate([a,b],axis=1)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=1).shape\n\n((2, 3, 4), (2, 3, 4), (2, 6, 4))\n\n\n\n두번째차원이 바뀌었다 =&gt; 두번째 축이 바뀌었다 =&gt; axis=1\n\n(분석3) np.concatenate([a,b],axis=2)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=2).shape\n\n((2, 3, 4), (2, 3, 4), (2, 3, 8))\n\n\n\n세번째차원이 바뀌었다 =&gt; 세번째 축이 바뀌었다 =&gt; axis=2\n\n(분석4) np.concatenate([a,b],axis=3)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\na.shape, b.shape, np.concatenate([a,b],axis=3).shape\n\nAxisError: axis 3 is out of bounds for array of dimension 3\n\n\n\n네번째차원이 없다 =&gt; 네번째 축이 없다 =&gt; axis=3으로 하면 에러가 난다.\n\n(보너스1)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-1)\n\narray([[[  0,   1,   2,   3,   0,  -1,  -2,  -3],\n        [  4,   5,   6,   7,  -4,  -5,  -6,  -7],\n        [  8,   9,  10,  11,  -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15, -12, -13, -14, -15],\n        [ 16,  17,  18,  19, -16, -17, -18, -19],\n        [ 20,  21,  22,  23, -20, -21, -22, -23]]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=-1).shape\n\n((2, 3, 4), (2, 3, 4), (2, 3, 8))\n\n\n\n마지막 차원이 바뀌었다 =&gt; 마지막 축이 바뀌었다 =&gt; axis = -1\n\n(보너스2)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-2)\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11],\n        [  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23],\n        [-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=-2).shape\n\n((2, 3, 4), (2, 3, 4), (2, 6, 4))\n\n\n\n마지막에서 2번째 차원이 바뀌었다 =&gt; 마지막에서 2번째 축이 바뀌었다 =&gt; axis = -2\n\n(보너스3)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-3)\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [  8,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]],\n\n       [[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]],\n\n       [[-12, -13, -14, -15],\n        [-16, -17, -18, -19],\n        [-20, -21, -22, -23]]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=-3).shape\n\n((2, 3, 4), (2, 3, 4), (4, 3, 4))\n\n\n\n마지막에서 3번째 차원이 바뀌었다 =&gt; 마지막에서 3번째 축이 바뀌었다 =&gt; axis = -3\n\n(보너스3)\n\na=np.array(range(2*3*4)).reshape(2,3,4) \nb=-a \n\n\nnp.concatenate([a,b],axis=-4)\n\nAxisError: axis -4 is out of bounds for array of dimension 3\n\n\n\n마지막에서 4번째 차원은 없다 =&gt; 마지막에서 4번째 축이 없다 =&gt; axis = -4는 에러가 난다.\n\n- 0차원은 축이 없으므로 concatenate를 쓸 수 없다.\n\na= np.array(1)\nb= np.array(-1) \n\n\na.shape, b.shape\n\n((), ())\n\n\n\nnp.concatenate([a,b])\n\nValueError: zero-dimensional arrays cannot be concatenated\n\n\n- 꼭 a,b가 같은 차원일 필요는 없다.\n\na=np.array(range(4)).reshape(2,2) \nb=np.array(range(2)).reshape(2,1)  \n\n\nnp.concatenate([a,b.T],axis=0)\n\narray([[0, 1],\n       [2, 3],\n       [0, 1]])\n\n\n\nnp.concatenate([a,b],axis=1)\n\narray([[0, 1, 0],\n       [2, 3, 1]])\n\n\n\na.shape, b.shape, np.concatenate([a,b],axis=1).shape\n\n((2, 2), (2, 1), (2, 3))"
  },
  {
    "objectID": "posts/Day2/ls06.html#np.stack",
    "href": "posts/Day2/ls06.html#np.stack",
    "title": "Lesson 06: numpy II",
    "section": "np.stack",
    "text": "np.stack\n- 혹시 아래가 가능할까?\n\n(3,) 결합 (3,) =&gt; (3,2)\n\n\na=np.array([1,2,3])\nb=-a\n\n\na,b\n\n(array([1, 2, 3]), array([-1, -2, -3]))\n\n\n\nnp.concatenate([a,b],axis=1)\n\nAxisError: axis 1 is out of bounds for array of dimension 1\n\n\n\n불가능\n\n- 아래와 같이 하면 해결가능\n\na=np.array([1,2,3]).reshape(3,1) \nb=-a\n\n\na,b\n\n(array([[1],\n        [2],\n        [3]]),\n array([[-1],\n        [-2],\n        [-3]]))\n\n\n\nnp.concatenate([a,b],axis=1)\n\narray([[ 1, -1],\n       [ 2, -2],\n       [ 3, -3]])\n\n\n\n분석: (3) (3) =&gt; (3,1) (3,1) =&gt; (3,1) concat (3,1)\n\n- 위의 과정을 줄여서 아래와 같이 할 수 있다.\n\na=np.array([1,2,3])\nb=-a\n\n\nnp.stack([a,b],axis=1)\n\narray([[ 1, -1],\n       [ 2, -2],\n       [ 3, -3]])\n\n\n- 아래도 가능\n\nnp.stack([a,b],axis=0)\n\narray([[ 1,  2,  3],\n       [-1, -2, -3]])\n\n\n- 분석해보고 외우자\n(분석1)\n\na=np.array([1,2,3])\nb=-a\n\n\na.shape, b.shape, np.stack([a,b],axis=0).shape\n\n((3,), (3,), (2, 3))\n\n\n\n\n\n=&gt; 첫 위치에 축을 추가 (axis=0) =&gt; (1,3) (1,3) =&gt; (2,3)\n\n\n\n(분석2)\n\na=np.array([1,2,3])\nb=-a\n\n\na.shape, b.shape, np.stack([a,b],axis=1).shape\n\n((3,), (3,), (3, 2))\n\n\n\n\n\n=&gt; 두 위치에 축을 추가 (axis=1) =&gt; (3,1) (3,1) =&gt; (3,2)\n\n\n\n- 고차원예제\n\na=np.arange(3*4*5).reshape(3,4,5) \nb=-a\n\n\na.shape, b.shape\n\n((3, 4, 5), (3, 4, 5))\n\n\n\nnp.stack([a,b],axis=0).shape # (3,4,5) =&gt; (1,3,4,5) // 첫 위치에 축이 추가되고 스택 \n\n(2, 3, 4, 5)\n\n\n\nnp.stack([a,b],axis=1).shape # (3,4,5) =&gt; (3,1,4,5) // 두번째 위치에 축이 추가되고 스택 \n\n(3, 2, 4, 5)\n\n\n\nnp.stack([a,b],axis=2).shape # (3,4,5) =&gt; (3,4,1,5) // 세번째 위치에 축이 추가되고 스택 \n\n(3, 4, 2, 5)\n\n\n\nnp.stack([a,b],axis=3).shape # (3,4,5) =&gt; (3,4,5,1) // 네번째 위치에 축이 추가되고 스택 \n\n(3, 4, 5, 2)\n\n\n\nnp.stack([a,b],axis=-1).shape # axis=-1 &lt;=&gt; axis=3 \n\n(3, 4, 5, 2)\n\n\n\nnp.stack([a,b],axis=-2).shape # axis=-2 &lt;=&gt; axis=2\n\n(3, 4, 2, 5)\n\n\nnp.concatenate 는 축의 총 갯수를 유지하면서 결합, np.stack은 축의 갯수를 하나 증가시키면서 결합"
  },
  {
    "objectID": "posts/Day2/ls06.html#sum",
    "href": "posts/Day2/ls06.html#sum",
    "title": "Lesson 06: numpy II",
    "section": "sum",
    "text": "sum\n- 1차원\n\na = np.array([1,2,3]) \na\n\narray([1, 2, 3])\n\n\n\na.sum()\n\n6\n\n\n\na.sum(axis=0)\n\n6\n\n\n- 2차원\n\na=np.array(range(6)).reshape(2,3)\na\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n\na.sum() # 전체합\n\n15\n\n\n\na.sum(axis=0) \n\narray([3, 5, 7])\n\n\n\na.sum(axis=1) \n\narray([ 3, 12])\n\n\n- 2차원 결과 분석\n\na.shape, a.sum(axis=0).shape\n\n((2, 3), (3,))\n\n\n\n첫번째 축이 삭제됨 =&gt; axis=0\n\n\na.shape, a.sum(axis=1).shape\n\n((2, 3), (2,))\n\n\n\n두번째 축이 삭제됨 =&gt; axis=1\n\n- 연습\n\na=np.array(range(10)).reshape(5,2) \na\n\narray([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])\n\n\n(문제1) 1열의 합, 2열의 합을 계산하고 싶다면?\n(풀이) 차원이 (5,2) =&gt; (2,) 로 나와야 한다. (그럼 첫번째 축이 삭제되어야 하네?)\n\na.sum(axis=0)\n\narray([20, 25])\n\n\n(문제2) 1행의 합, 2행의 합, … , 5행의 합을 계산하고 싶다면?\n(풀이) 차원이 (5,2) =&gt; (5,)로 나와야 한다. (그럼 두번째 축이 삭제되어야 하네?)\n\na.sum(axis=1)\n\narray([ 1,  5,  9, 13, 17])\n\n\n(문제3) a의 모든원소의 합을 계산하고 싶다면?\n(풀이) 차원이 (5,2) =&gt; () 로 나와야 한다. (첫번째축, 두번째축이 모두 삭제되어야 하네?)\n\na.sum(axis=(0,1))\n\n45\n\n\n\na.sum() # 즉 a.sum(axis=(0,1))이 디폴트값임 \n\n45"
  },
  {
    "objectID": "posts/Day2/ls06.html#mean-max-min",
    "href": "posts/Day2/ls06.html#mean-max-min",
    "title": "Lesson 06: numpy II",
    "section": "mean, max, min",
    "text": "mean, max, min\n- 모두 sum이랑 유사한 논리\n\na=np.array(range(10)).reshape(5,2)\na\n\narray([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]])\n\n\n\na.mean(axis=0), a.max(axis=0), a.min(axis=0)\n\n(array([4., 5.]), array([8, 9]), array([0, 1]))\n\n\n\na.mean(axis=1), a.max(axis=1), a.min(axis=1)\n\n(array([0.5, 2.5, 4.5, 6.5, 8.5]),\n array([1, 3, 5, 7, 9]),\n array([0, 2, 4, 6, 8]))"
  },
  {
    "objectID": "posts/Day2/ls10.html#애드워드-터프티",
    "href": "posts/Day2/ls10.html#애드워드-터프티",
    "title": "Lesson 10: seaborn, plotnine",
    "section": "애드워드 터프티",
    "text": "애드워드 터프티\n- 데이터 시각화계의 거장\n- 터프티의 이론중 백미: 엄격한 미니멀리즘\n\n최소한의 잉크로 많은 정보를 전달할 수 있다면 그것이 바로 좋은 그래프이다.\n작은 지면 내에서 잉크를 최대한 적게 써서 짧은 시간 안에 많은 영감을 주어야 한다.\n\n- 데이터-잉크비: 데이터를 표현하는데 들아가는 잉크의 양 / 그래픽을 인쇄하는데 들어가는 잉크의 총량\n- 차트정크 (나이젤홈즈의 그래프)\n\n\n“Lurking behind chartjunk is contempt both for information and for the audience. Chartjunk promoters imagine that numbers and details are boring, dull, and tedious, requiring ornament to enliven. Cosmetic decoration, which frequently distorts the data, will never salvage an underlying lack of content. If the numbers are boring, then you’ve got the wrong numbers (…) Worse is contempt for our audience, designing as if readers were obtuse and uncaring. In fact, consumers of graphics are often more intelligent about the information at hand than those who fabricate the data decoration (…) The operating moral premise of information design should be that our readers are alert and caring; they may be busy, eager to get on with it, but they are not stupid.”\n\n\n차트정크 = 대중을 멸시 + 데이터에 대한 모독\n차트정크 옹호가는 숫자와 데이터가 지루하여 활기가 필요하다고 생각하는 모양이다..\n\n- 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽\n\n- 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽\n\n- 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽\n\n- 제 생각: 글쎄…"
  },
  {
    "objectID": "posts/Day2/ls10.html#찰스미나드의-도표",
    "href": "posts/Day2/ls10.html#찰스미나드의-도표",
    "title": "Lesson 10: seaborn, plotnine",
    "section": "찰스미나드의 도표",
    "text": "찰스미나드의 도표\n\n인류역사상 가장 훌륭한 시각화\n\n\n- 터프티의 평\n\n지금까지 그려진 최고의 통계 그래픽일지도 모른다.\n여기에서는 군대의 크기, 2차원 평면상의 위치, 군대의 이동방향, 모스코바에서 퇴각하는 동안의 여러날짜, 온도 \\(\\to\\) 6차원의 변수\n백만번에 한번 이런 그림을 그릴수는 있겠지만 이러한 멋진 그래픽을 만드는 방법에 대한 원칙은 없다. \\(\\to\\) 미니멀리즘..\n\n- 왜 우수한 그래프일까?\n\n자료를 파악하는 기법은 최근까지도 산점도, 막대그래프, 라인플랏에 의존\n이러한 플랏의 단점은 고차원의 자료를 분석하기 어렵다는 것임\n미나드는 여러그림을 그리는 방법 대신에 한 그림에서 패널을 늘리는 방법을 선택함."
  },
  {
    "objectID": "posts/Day2/ls09.html",
    "href": "posts/Day2/ls09.html",
    "title": "Lesson 09: matplotlib",
    "section": "",
    "text": "#!pip install opencv-python\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport cv2"
  },
  {
    "objectID": "posts/Day2/ls09.html#motivating-example",
    "href": "posts/Day2/ls09.html#motivating-example",
    "title": "Lesson 09: matplotlib",
    "section": "motivating example",
    "text": "motivating example\n- 통계란?\n- 평균 좋아해요?\n# 예제1 – 전북고등학교: 평균은 좋은 측정값인가?\n- 전북고등학교에서 통계학을 수업하는 A선생님과 B선생님의 있다.\n\ny1=[75,75,76,76,77,77,78,79,79,98] # A선생님에게 통계학을 배운 학생의 점수들\ny2=[76,76,77,77,78,78,79,80,80,81] # B선생님에게 통계학을 배운 학생의 점수들 \n\n- 어떤반이 더 공부를 잘할까?, 누가 더 잘 가르칠까?\n\nnp.mean(y1)\n\n79.0\n\n\n\nnp.mean(y2)\n\n78.2\n\n\n- 의사결정: A선생님에게 배운 학생들의 평균이 더 높다. -&gt; A선생님이 더 강의를 잘 하셨다?\n- 반론: 평균은 A반(=A선생님에게 통계학을 배운 반)이 더 높다. 그런데 98점을 받은 학생이 A반에 포함되어서 A반이 전체평균이 높게 나온것이고 나머지 학생들은 전체적으로 B반 학생들이 더 시험을 잘 보았다고 해석할 수 있다.\n- 교훈: 단순한 평균비교보다 학생들이 받은 점수의 분포를 비교해보는 것이 중요하다. 분포를 살펴보는 방법 중 유용한 방법이 박스플랏이다.\n#"
  },
  {
    "objectID": "posts/Day2/ls09.html#matplotlib으로-boxplot-그리기",
    "href": "posts/Day2/ls09.html#matplotlib으로-boxplot-그리기",
    "title": "Lesson 09: matplotlib",
    "section": "matplotlib으로 boxplot 그리기",
    "text": "matplotlib으로 boxplot 그리기\n- A반 학생들의 박스플랏 그리기\n\nplt.boxplot(y1);\n\n\n\n\n\n\n\n\n- B반 학생들의 박스플랏 그리기\n\nplt.boxplot(y2);\n\n\n\n\n\n\n\n\n- A반 학생들의 점수와 B반 학생들의 점수를 나란히 박스플랏으로 그리자.\n\nplt.boxplot([y1,y2]);"
  },
  {
    "objectID": "posts/Day2/ls09.html#boxplot을-언제-쓰면-좋을까",
    "href": "posts/Day2/ls09.html#boxplot을-언제-쓰면-좋을까",
    "title": "Lesson 09: matplotlib",
    "section": "boxplot을 언제 쓰면 좋을까?",
    "text": "boxplot을 언제 쓰면 좋을까?\n- 박스플랏의 장점: 단순히 평균을 주는 것보다 데이터를 파악하고 직관을 얻기에 유리하다."
  },
  {
    "objectID": "posts/Day2/ls09.html#motivating-example-1",
    "href": "posts/Day2/ls09.html#motivating-example-1",
    "title": "Lesson 09: matplotlib",
    "section": "motivating example",
    "text": "motivating example\n- 전북고예제에서 우리의 소망: “A반 B반 중에 어떤 반이 공부를 더 잘하냐?”, “A선생님과 B선생님 중 어떤 분의 강의가 효과적이었다고 평할 수 있는가?” 와 같은 단순한 질문에 대한 대답\n\n보통 이러한 질문은 중심경향값 중 하나를 골라서 비교하면 되었다.\n여기에서 중심경향값이란 데이터 분포의 중심을 보여주는 값으로 자료 전체를 대표할 수 있는 값을 말함. 평균, 중앙값등이 대표적인 중심경향값이다.\n\n- 전북고예제에서는 “A반 B반 중에서 어떤 반이 공부를 더 잘하냐?” 라는 질문의 대답으로 단순평균비교로는 의미가 없었다. 오히려 결과론적으로 보면 중앙값이 더 타당해 보인다.\n- 그런데 사실 생각해보면 중앙값을 기준으로 B반이 공부를 더 잘했다고 주장하는 것도 애매하다. 어쨌든 가장 공부잘한 학생은 A반에 있으니까!\n\n에이 한명 뿐이잖아요? 라고 생각할 수 있는데 그 한명이 2명 3명으로 점점 늘어난다고 생각해보자, 합리적인 기준을 제시할 수 있는가?\n그리고 A반을 지도한 선생님이 영재를 지도하는데 특화된 선생님일수도 있잖아요?\n\n- 사실 “A반 B반중에 누가 더 공부를 잘하냐?” 라는 질문은 굉장히 대답하기 곤란한 질문이다. 왜냐하면\n\n이슈1: 단순 평균비교로 이러한 질문에 답을 하기 어렵다.\n이슈2: 박스플랏으로 전체분포를 파악해도 어떠한 반이 더 공부를 잘한다는 기준을 잡는게 애매하다.\n\n- 그런데 특수한 경우에는 “A반 B반중에 누가 더 공부를 잘하냐?” 라는 질문에 대한 대답을 깔끔하게 할 수 있다.\n# 예제2 – 정규분포 전북고등학교: 평균은 좋은 측정값인가?\n- A반과 B반의 통계학 성적이 아래와 같다고 하자.\n\nnp.random.seed(43052)\ny1 = np.random.randn(10000)\ny2 = np.random.randn(10000) + 0.5 \n\n\nnp.mean(y1),np.mean(y2)\n\n(-0.011790879905079434, 0.4979147460611458)\n\n\n\nnp.mean(y2) - np.mean(y1)\n\n0.5097056259662253\n\n\ny2의 값이 y1의 값보다 전체적으로 0.5097056259662253 정도 높다고 볼 수 있다?\n\nplt.boxplot([y1,y2]);\n\n\n\n\n\n\n\n\n\n분포의 모양이 거의 비슷, 왼쪽그림을 컨트롤+C 하여 오른쪽에 붙인다음 0.5정도 y축으로 올린느낌이다!\n\n- 여기에서는 “B반의 성적 \\(\\approx\\) A반의 성적 + 0.5” 라고 주장해도 큰 무리가 없어보인다. 따라서 이 경우에는 “A반 B반 중에 어떤반이 더 공부를 잘하냐?” 라는 질문에 대하여 “B반이 평균적으로 0.5점정도 더 공부를 잘합니다” 라고 대답해도 괜찮다.\n\n이 예제에서는 우연히 극단적인 학생이 없었음.\n그렇지만 혹시 극단적인 학생이 나온다면? 걱징X. 너무 극단적인 값이 많이 나오면 정규분포가 아님 + 만약에 어떠한 반에서 극단적인 학생이 나온다면 똑같은 확률로 다른반 역시 그러한 극단적 학생이 나올 것\n\n- 결론: 정규분포 분포가정을 한다면 이슈1,2에 대한 문제를 한번에 해결가능 함\n#\n- 정규분포가정은 어떻게 할 수 있나? (= 데이터를 보고 어떻게 정규분포라고 알 수 있는가?): 데이터의 히스토그램을 그려서 종 모양이 되는지 확인해본다.1\n1 아직 초보단계라서 이것밖에 모를 수 있어요"
  },
  {
    "objectID": "posts/Day2/ls09.html#histogram-이란",
    "href": "posts/Day2/ls09.html#histogram-이란",
    "title": "Lesson 09: matplotlib",
    "section": "histogram 이란?",
    "text": "histogram 이란?\n- 히스토그램: X축이 변수의 구간, Y축은 그 구간에 포함된 빈도를 의미하는 그림"
  },
  {
    "objectID": "posts/Day2/ls09.html#histogram-그리기",
    "href": "posts/Day2/ls09.html#histogram-그리기",
    "title": "Lesson 09: matplotlib",
    "section": "histogram 그리기",
    "text": "histogram 그리기\n- 히스토그램의 예시1 – 기본플랏, ;으로 결과 생략하기\n\ny=[10,11,12,15,16,20,21,22,23,24,25]\n\n\nplt.hist(y)\n\n(array([2., 1., 0., 1., 1., 0., 1., 1., 2., 2.]),\n array([10. , 11.5, 13. , 14.5, 16. , 17.5, 19. , 20.5, 22. , 23.5, 25. ]),\n &lt;BarContainer object of 10 artists&gt;)\n\n\n\n\n\n\n\n\n\n\nplt.hist(y,bins=10)\n\n(array([2., 1., 0., 1., 1., 0., 1., 1., 2., 2.]),\n array([10. , 11.5, 13. , 14.5, 16. , 17.5, 19. , 20.5, 22. , 23.5, 25. ]),\n &lt;BarContainer object of 10 artists&gt;)\n\n\n\n\n\n\n\n\n\n- 히스토그램 예시2 – bins 옵션이용\n\nplt.hist(y,bins=3)\n\n(array([3., 2., 6.]),\n array([10., 15., 20., 25.]),\n &lt;BarContainer object of 3 artists&gt;)\n\n\n\n\n\n\n\n\n\n- 히스토그램 예시3 – bins=3 옵션의 결과값 해석\n\nplt.hist(y,bins=3)\n\n(array([3., 2., 6.]),\n array([10., 15., 20., 25.]),\n &lt;BarContainer object of 3 artists&gt;)\n\n\n\n\n\n\n\n\n\n\n가장 큰 값은 25, 가장 작은 값은 10이므로 range는 15이다.\nrange / bins = 15 / 3 = 5 이므로 각 구간의 간격은 5이다.\n구간은 [10,15), [15,20), [20,25] 로 나눈다.\n각 구간에 포함된 자료의 수는 3,2,6 이다.\n\n- 히스토그램 예시4 – bins=7 옵션의 결과값 해석\n\nplt.hist(y,bins=7) \n\n(array([3., 0., 2., 0., 1., 2., 3.]),\n array([10.        , 12.14285714, 14.28571429, 16.42857143, 18.57142857,\n        20.71428571, 22.85714286, 25.        ]),\n &lt;BarContainer object of 7 artists&gt;)\n\n\n\n\n\n\n\n\n\n\n가장 큰 값은 25, 가장 작은 값은 10이므로 range는 15이다.\nrange / bins = 15 / 7 = 2.142857142857143 이므로 각 구간의 간격은 2.142857142857143이다.\n구간은 [10,12.14285714), [12.14285714,14.28571429,), [22.85714286,25] 로 나눈다.\n각 구간에 포함된 자료의 수는 3,0,2,0,1,2,3 이다.\n\n- 히스토그램 예시5 – range 옵션\n\nplt.hist(y,bins=7,range=[0,30]) # range를 변경하면 --&gt; 구간도 달라짐\n\n(array([0., 0., 3., 2., 2., 4., 0.]),\n array([ 0.        ,  4.28571429,  8.57142857, 12.85714286, 17.14285714,\n        21.42857143, 25.71428571, 30.        ]),\n &lt;BarContainer object of 7 artists&gt;)\n\n\n\n\n\n\n\n\n\n- 히스토그램 예시6 – 나란히 그리기\n\nnp.random.seed(43052)\ny1 = np.random.randn(10000)\ny2 = np.random.randn(10000) + 0.5 \nplt.hist([y1,y2],bins=100);"
  },
  {
    "objectID": "posts/Day2/ls09.html#예비학습1-이미지자료-다운로드",
    "href": "posts/Day2/ls09.html#예비학습1-이미지자료-다운로드",
    "title": "Lesson 09: matplotlib",
    "section": "예비학습1: 이미지자료 다운로드",
    "text": "예비학습1: 이미지자료 다운로드\n- ref: https://en.wikipedia.org/wiki/Histogram_equalization\n\n!wget https://upload.wikimedia.org/wikipedia/commons/0/08/Unequalized_Hawkes_Bay_NZ.jpg\nimg = cv2.imread('Unequalized_Hawkes_Bay_NZ.jpg')\n!rm Unequalized_Hawkes_Bay_NZ.jpg\n\n--2024-01-09 15:43:57--  https://upload.wikimedia.org/wikipedia/commons/0/08/Unequalized_Hawkes_Bay_NZ.jpg\nResolving upload.wikimedia.org (upload.wikimedia.org)... 103.102.166.240, 2001:df2:e500:ed1a::2:b\nConnecting to upload.wikimedia.org (upload.wikimedia.org)|103.102.166.240|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 110895 (108K) [image/jpeg]\nSaving to: ‘Unequalized_Hawkes_Bay_NZ.jpg’\n\nUnequalized_Hawkes_ 100%[===================&gt;] 108.30K   567KB/s    in 0.2s    \n\n2024-01-09 15:43:57 (567 KB/s) - ‘Unequalized_Hawkes_Bay_NZ.jpg’ saved [110895/110895]\n\n\n\n\n!wget 주소: 주소에 있는 이미지를 다운로드\n!rm 파일이름: 현재폴더에 “파일이름”을 삭제\n\n\nplt.imshow(img)\n\n\n\n\n\n\n\n\n\n다운받은 이미지를 보는 방법"
  },
  {
    "objectID": "posts/Day2/ls09.html#예비학습2-이미지자료의-이해",
    "href": "posts/Day2/ls09.html#예비학습2-이미지자료의-이해",
    "title": "Lesson 09: matplotlib",
    "section": "예비학습2: 이미지자료의 이해",
    "text": "예비학습2: 이미지자료의 이해\n\n비밀1: 이미지는 사실 숫자들의 집합이었음.\n- 예시1 – 2d array = 흑백이미지\n\n_img1 = np.array([0,30,90,120,150,180,210,240,255]).reshape(3,3)\n_img1\n\narray([[  0,  30,  90],\n       [120, 150, 180],\n       [210, 240, 255]])\n\n\n\nplt.imshow(_img1,cmap='gray')\nplt.colorbar()\n\n\n\n\n\n\n\n\n- 예시2 – 2d array = 흑백이미지\n\n_img2 = np.array([0,20,40,60,80,100,120,140,160]).reshape(3,3)\n_img2\n\narray([[  0,  20,  40],\n       [ 60,  80, 100],\n       [120, 140, 160]])\n\n\n\nplt.imshow(_img2,cmap='gray',vmin=0,vmax=255)\nplt.colorbar()\n\n\n\n\n\n\n\n\n- 예시3 – 나란히 그리기\n\n_img3 = np.concatenate([_img1,_img2],axis=1)\n_img3\n\narray([[  0,  30,  90,   0,  20,  40],\n       [120, 150, 180,  60,  80, 100],\n       [210, 240, 255, 120, 140, 160]])\n\n\n\nplt.imshow(_img3,cmap='gray')\n\n\n\n\n\n\n\n\n\n\n비밀2: 칼라이미지는 red + green + blue 의 조합으로 표현가능 (다른방식도 가능)\n- ref: https://en.wikipedia.org/wiki/RGB_color_model\n\n\n\n그림 ??: 위키에서 긁은 그림, 빛의 3원색을 표현하고 있음\n\n\n- 예시1 – 3d array = 칼라이미지\n\nr = np.array(\n    [[  0,   0,   0,   0,   0],\n     [  0,   0,   0,   0,   0],\n     [255, 255, 255, 255, 255],\n     [255, 255, 255, 255, 255],\n     [255, 255, 255, 255, 255]]\n)\ng = np.array(\n    [[255, 255, 255,  0,   0],\n     [255, 255, 255,  0,   0],\n     [255, 255, 255,  0,   0],\n     [  0,   0,   0,  0,   0],\n     [  0,   0,   0,  0,   0]]\n)\nb = np.array(\n    [[  0,   0, 255, 255, 255],\n     [  0,   0, 255, 255, 255],\n     [  0,   0, 255, 255, 255],\n     [  0,   0,   0,   0,   0],\n     [  0,   0,   0,   0,   0]]\n)\nz = np.array(\n    [[ 0,  0,  0,  0,  0],\n     [ 0,  0,  0,  0,  0],\n     [ 0,  0,  0,  0,  0],\n     [ 0,  0,  0,  0,  0],\n     [ 0,  0,  0,  0,  0]]\n)    \n\n\nred = np.stack([r,z,z],axis=-1)\ngreen = np.stack([z,g,z],axis=-1)\nblue = np.stack([z,z,b],axis=-1)\n\n\nplt.imshow(red)\n\n\n\n\n\n\n\n\n\nplt.imshow(green)\n\n\n\n\n\n\n\n\n\nplt.imshow(blue)\n\n\n\n\n\n\n\n\n\nplt.imshow(red+green+blue)\n\n\n\n\n\n\n\n\n- 예시2: R,G,B를 같은 비율로 섞으면 다시 흑백이미지가 된다.\n\narr2 = np.array(\n    [[10,  40],\n     [80,  60]]\n)\narr2\n\narray([[10, 40],\n       [80, 60]])\n\n\n\narr3 = np.stack([arr2,arr2,arr2],axis=-1)\nplt.imshow(arr3)\n\n\n\n\n\n\n\n\n\nplt.imshow(arr2,cmap='gray',vmin=0,vmax=255)\nplt.colorbar()"
  },
  {
    "objectID": "posts/Day2/ls09.html#히스토그램-이퀄라이제이션",
    "href": "posts/Day2/ls09.html#히스토그램-이퀄라이제이션",
    "title": "Lesson 09: matplotlib",
    "section": "히스토그램 이퀄라이제이션",
    "text": "히스토그램 이퀄라이제이션\n- 우리가 관심있었던 이미지\n\nplt.imshow(img)\n\n\n\n\n\n\n\n\n- 이미지를 rgb로 각각 분리하고 각 색깔들의 히스토그램을 그려보자.\n\nr= img[:,:,0] # 빨강(R)\ng= img[:,:,1] # 녹색(G)\nb= img[:,:,2] # 파랑(B)\n\n\nplt.hist(b.reshape(-1),bins=255,range=(0,255));\n\n\n\n\n\n\n\n\n- cv2.equalizeHist()를 이용하여 분포의 모양은 대략적으로 유지하면서 값을 퍼트리자!\n\nrr = cv2.equalizeHist(r)\ngg = cv2.equalizeHist(g)\nbb = cv2.equalizeHist(b)\n\n\nplt.hist(r.reshape(-1),bins=255,range=(0,255));\nplt.hist(rr.reshape(-1),bins=255,range=(0,255));\n\n\n\n\n\n\n\n\n\nimg2= np.stack([rr, gg, bb ],axis=-1)\n\n\nimg.shape\n\n(683, 1024, 3)\n\n\n\nimg2.shape\n\n(683, 1024, 3)\n\n\n\n(683,1024,3), (683,1024,3) -&gt; (683,2048,3)\n\n\nplt.imshow(np.concatenate([img,img2],axis=1))\n\n\n\n\n\n\n\n\n\nimg.shape\n\n(683, 1024, 3)\n\n\n\ncv2.equalizeHist(r)\n\n\nrr = cv2.equalizeHist(r)\ngg = cv2.equalizeHist(g)\nbb = cv2.equalizeHist(b)\n\n\nplt.hist(r.reshape(-1),bins=255, range=[0,255],label='befor');\nplt.hist(rr.reshape(-1),bins=255,range=[0,255],label='after');\nplt.legend()\n\n\n\n\n\n\n\n\n- 변환이후의 이미지를 그려본다면?\n\nimg2 = np.stack([rr,gg,bb],axis=-1)\n\n\nplt.imshow(img2)\n\n\n\n\n\n\n\n\n\nplt.imshow(np.concatenate([img,img2],axis=1))"
  },
  {
    "objectID": "posts/Day2/ls09.html#기본플랏",
    "href": "posts/Day2/ls09.html#기본플랏",
    "title": "Lesson 09: matplotlib",
    "section": "기본플랏",
    "text": "기본플랏\n\nplt.plot([1,2,3,2])"
  },
  {
    "objectID": "posts/Day2/ls09.html#모양변경",
    "href": "posts/Day2/ls09.html#모양변경",
    "title": "Lesson 09: matplotlib",
    "section": "모양변경",
    "text": "모양변경\n\nplt.plot([1,2,3,2],'--')"
  },
  {
    "objectID": "posts/Day2/ls09.html#색상변경",
    "href": "posts/Day2/ls09.html#색상변경",
    "title": "Lesson 09: matplotlib",
    "section": "색상변경",
    "text": "색상변경\n- 예시1\n\nplt.plot([1,2,3,2],'r--')\n\n\n\n\n\n\n\n\n- 예시2\n\nplt.plot([1,2,3,2],'b')"
  },
  {
    "objectID": "posts/Day2/ls09.html#모양-색상변경",
    "href": "posts/Day2/ls09.html#모양-색상변경",
    "title": "Lesson 09: matplotlib",
    "section": "모양 + 색상변경",
    "text": "모양 + 색상변경\n- 예시1\n\nplt.plot([1,2,3,2],'--r')\n\n\n\n\n\n\n\n\n- 예시2: 순서변경 가능\n\nplt.plot([1,2,3,2],'r--')\n\n\n\n\n\n\n\n\n\nplt.plot([1,2,3,2],'o--g')"
  },
  {
    "objectID": "posts/Day2/ls09.html#원리",
    "href": "posts/Day2/ls09.html#원리",
    "title": "Lesson 09: matplotlib",
    "section": "원리?",
    "text": "원리?\n- r--등의 옵션은 Markers + Line Styles + Colors 의 조합으로 표현가능\nref: https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html\n\n--r: 점선(dashed)스타일 + 빨간색\nr--: 빨간색 + 점선(dashed)스타일\n:k: 점선(dotted)스타일 + 검은색\nk:: 검은색 + 점선(dotted)스타일\n\n- 우선 Marker를 무시하면 Line Styles + Color로 표현가능한 조합은 \\(4\\times 8=32\\) 개\n\nLine StylesColorsMarkers\n\n\n\n\n\ncharacter\ndescription\n\n\n\n\n‘-’\nsolid line style\n\n\n‘–’\ndashed line style\n\n\n‘-.’\ndash-dot line style\n\n\n‘:’\ndotted line style\n\n\n\n\n\n\n\n\ncharacter\ncolor\n\n\n\n\n‘b’\nblue\n\n\n‘g’\ngreen\n\n\n‘r’\nred\n\n\n‘c’\ncyan\n\n\n‘m’\nmagenta\n\n\n‘y’\nyellow\n\n\n‘k’\nblack\n\n\n‘w’\nwhite\n\n\n\n\n\n\n\n\ncharacter\ndescription\n\n\n\n\n‘.’\npoint marker\n\n\n‘,’\npixel marker\n\n\n‘o’\ncircle marker\n\n\n‘v’\ntriangle_down marker\n\n\n‘^’\ntriangle_up marker\n\n\n‘&lt;’\ntriangle_left marker\n\n\n‘&gt;’\ntriangle_right marker\n\n\n‘1’\ntri_down marker\n\n\n‘2’\ntri_up marker\n\n\n‘3’\ntri_left marker\n\n\n‘4’\ntri_right marker\n\n\n‘8’\noctagon marker\n\n\n‘s’\nsquare marker\n\n\n‘p’\npentagon marker\n\n\n‘P’\nplus (filled) marker\n\n\n’*’\nstar marker\n\n\n‘h’\nhexagon1 marker\n\n\n‘H’\nhexagon2 marker\n\n\n‘+’\nplus marker\n\n\n‘x’\nx marker\n\n\n‘X’\nx (filled) marker\n\n\n‘D’\ndiamond marker\n\n\n‘d’\nthin_diamond marker\n\n\n‘|’\nvline marker\n\n\n’_’\nhline marker\n\n\n\n\n\n\n- 예시1\n\nplt.plot([1,2,4,3],'b-.')\n\n\n\n\n\n\n\n\n- 예시2\n\nplt.plot([1,2,4,3],'k:')\n\n\n\n\n\n\n\n\n- 예시3: line style + color 조합으로 사용하든 color + line style 조합으로 사용하든 상관없음\n\nplt.plot([1,2,4,3],'-.b')\n\n\n\n\n\n\n\n\n\nplt.plot([1,2,4,3],':k')\n\n\n\n\n\n\n\n\n- 예시4: line style을 중복으로 사용하거나 color를 중복으로 쓸 수 는 없다.\n\nplt.plot([1,2,4,3],'br')\n\nValueError: 'br' is not a valid format string (two color symbols)\n\n\n\n\n\n\n\n\n\n- 예시5: 색이 사실 8개만 있는건 아니다.\nref: https://matplotlib.org/2.0.2/examples/color/named_colors.html\n\nplt.plot([1,2,4,3],color='lime')\n\n\n\n\n\n\n\n\n- 예시6: 색을 바꾸려면 hex코드를 넣는 방법이 젤 깔끔함\nref: https://htmlcolorcodes.com/\n\nplt.plot([1,2,4,3],color='#7E277E')\n\n\n\n\n\n\n\n\n- 예시7: 당연히 라인스타일도 4개만 있진 않음\nref: https://matplotlib.org/stable/gallery/lines_bars_and_markers/linestyles.html\n\nplt.plot([1,2,4,3],linestyle=(0, (10, 1)))"
  },
  {
    "objectID": "posts/Day2/ls09.html#원리-1",
    "href": "posts/Day2/ls09.html#원리-1",
    "title": "Lesson 09: matplotlib",
    "section": "원리",
    "text": "원리\n- 그냥 마커를 설정하면 끝!\n\nplt.plot([1,2,4,3],'o')"
  },
  {
    "objectID": "posts/Day2/ls09.html#기본플랏-1",
    "href": "posts/Day2/ls09.html#기본플랏-1",
    "title": "Lesson 09: matplotlib",
    "section": "기본플랏",
    "text": "기본플랏\n- 예시1\n\nplt.plot([1,2,4,3],'x')\n\n\n\n\n\n\n\n\n- 예시2\n\nplt.plot([1,2,4,3],'D')"
  },
  {
    "objectID": "posts/Day2/ls09.html#색깔변경",
    "href": "posts/Day2/ls09.html#색깔변경",
    "title": "Lesson 09: matplotlib",
    "section": "색깔변경",
    "text": "색깔변경\n- 예시1\n\nplt.plot([1,2,4,3],'or')\n\n\n\n\n\n\n\n\n- 예시2\n\nplt.plot([1,2,4,3],'db')\n\n\n\n\n\n\n\n\n- 예시3\n\nplt.plot([1,2,4,3],'bx')"
  },
  {
    "objectID": "posts/Day2/ls09.html#dot-connected-plot",
    "href": "posts/Day2/ls09.html#dot-connected-plot",
    "title": "Lesson 09: matplotlib",
    "section": "dot-connected plot",
    "text": "dot-connected plot\n- 예시1: 마커와 라인스타일을 동시에 사용하면 dot-connected plot이 된다.\n\nplt.plot([1,2,4,3],'--o')\n\n\n\n\n\n\n\n\n- 예시2: 당연히 색도 적용가능함\n\nplt.plot([1,2,4,3],'--or')\n\n\n\n\n\n\n\n\n- 예시3: 서로 순서를 바꿔도 상관없다.\n\nplt.plot([1,2,4,3],'r--o')\n\n\n\n\n\n\n\n\n- 예시4: 색만 따로 바꾸고싶다면?\n\nplt.plot([1,2,4,3],'--o',color='lime')"
  },
  {
    "objectID": "posts/Day2/ls09.html#motivating-ex",
    "href": "posts/Day2/ls09.html#motivating-ex",
    "title": "Lesson 09: matplotlib",
    "section": "motivating EX",
    "text": "motivating EX\n# 예제 – 키와 몸무게의 산점도\n- 아래와 같은 자료를 수집하였다고 하자.\n\n몸무게 = [44,48,49,58,62,68,69,70,76,79]\n키 = [159,160,162,165,167,162,165,175,165,172]\n\n\nx=[44,48,49,58,62,68,69,70,76,79]\ny=[159,160,162,165,167,162,165,175,165,172]\n\n\nplt.plot(x,y,'o')\n\n\n\n\n\n\n\n\n\n키가 큰 사람일수록 몸무게도 많이 나간다. (반대도 성립)\n키와 몸무게는 관계가 있어보인다. (정비례)\n\n- 얼만큼 정비례인지?\n\n이 질문에 대답하기 위해서는 상관계수의 개념을 알아야 한다.\n상관계수는 산점도의 해석에서 가장 중요한 개념 중 하나.\n\n#"
  },
  {
    "objectID": "posts/Day2/ls09.html#예비학습-상관계수",
    "href": "posts/Day2/ls09.html#예비학습-상관계수",
    "title": "Lesson 09: matplotlib",
    "section": "예비학습 – 상관계수",
    "text": "예비학습 – 상관계수\n# 예제 – 키와 몸무게에서 상관계수\n- 다시 아래의 자료를 고려하자.\n\nx=[44,48,49,58,62,68,69,70,76,79]\ny=[159,160,162,165,167,162,165,175,165,172]\n\n- (표본)상관계수\n\\[r=\\frac{\\sum_{i=1}^{n}(x_i-\\bar{x})(y_i-\\bar{y}) }{\\sqrt{\\sum_{i=1}^{n}(x_i-\\bar{x})^2\\sum_{i=1}^{n}(y_i-\\bar{y})^2 }}=\\sum_{i=1}^{n}\\tilde{x}_i\\tilde{y}_i \\]\n\n단, \\(\\tilde{x}_i=\\frac{(x_i-\\bar{x})}{\\sqrt{\\sum_{i=1}^n(x_i-\\bar{x})^2}}\\), \\(\\tilde{y}_i=\\frac{(y_i-\\bar{y})}{\\sqrt{\\sum_{i=1}^n(y_i-\\bar{y})^2}}\\)\n\n- 상관계수를 계산하는 방법\n(원래자료)\n\nx,y\n\n([44, 48, 49, 58, 62, 68, 69, 70, 76, 79],\n [159, 160, 162, 165, 167, 162, 165, 175, 165, 172])\n\n\n(평균을 0으로)\n\nxx = x-np.mean(x)\nyy = y-np.mean(y) \n\n(퍼진정도를 표준화)\n\nxxx = xx/np.sqrt(np.sum(xx**2))\nyyy = yy/np.sqrt(np.sum(yy**2))\n\n\n(xxx*yyy).sum()\n\n0.7138620583559141\n\n\n- 상관계수를 계산하는 방법2\n\nnp.corrcoef(x,y)\n\narray([[1.        , 0.71386206],\n       [0.71386206, 1.        ]])\n\n\n- 상관계수의 성질: 절대값이 1보다 작다.\n\nfig,ax = plt.subplots(1,2)\nax[0].plot(x,y,'o')\nax[1].plot(xxx,yyy,'x')\n\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "posts/Day2/ls09.html#산점도를-보고-상관계수의-부호를-해석",
    "href": "posts/Day2/ls09.html#산점도를-보고-상관계수의-부호를-해석",
    "title": "Lesson 09: matplotlib",
    "section": "산점도를 보고 상관계수의 부호를 해석",
    "text": "산점도를 보고 상관계수의 부호를 해석\n# 예제 – 키와 몸무게의 산점도 + 상관계수의 부호해석\n- 질문: 아래의 그림은 상관계수 \\(r\\)의 값이 양수인가 음수인가?\n\nx=[44,48,49,58,62,68,69,70,76,79]\ny=[159,160,162,165,167,162,165,175,165,172]\n\n\nplt.plot(x,y,'o')\n\n\n\n\n\n\n\n\n- 차근차근 따져보자.\n\nxx = x-np.mean(x)\nyy = y-np.mean(y) \nxxx = xx/np.sqrt(np.sum(xx**2))\nyyy = yy/np.sqrt(np.sum(yy**2))\n\n\nfig, (ax1,ax2,ax3) = plt.subplots(1,3,figsize=(10,3))\nax1.plot(x,y,'o'); ax1.set_title(r'$(x_i,y_i)$')\nax2.plot(xx,yy,'o'); ax2.set_title(r'$(x_i-\\bar{x},y_i-\\bar{y})$')\nax3.plot(xxx,yyy,'o'); ax3.set_title(r'$(\\tilde{x}_i,\\tilde{y}_i)$')\n\nText(0.5, 1.0, '$(\\\\tilde{x}_i,\\\\tilde{y}_i)$')\n\n\n\n\n\n\n\n\n\n\n\\(\\tilde{x}_i\\), \\(\\tilde{y}_i\\) 를 곱한값이 양수인것과 음수인것을 체크해보자.\n양수인쪽이 많은지 음수인쪽이 많은지 생각해보자.\n\\(r=\\sum_{i=1}^{n}\\tilde{x}_i \\tilde{y}_i\\) 의 부호는?\n\n- 그림을 보고 상관계수의 부호를 알아내는 방법? \\((x_i,y_i)\\)의 산점도를 보고 \\((\\tilde{x}_i, \\tilde{y}_i)\\) 의 산점도를 상상 \\(\\to\\) 1,3 분면에 점들이 많으면 양수, 2,4 분면에 점들이 많으면 음수\n#"
  },
  {
    "objectID": "posts/Day2/ls08.html#lambda",
    "href": "posts/Day2/ls08.html#lambda",
    "title": "Lesson 08: pandas I",
    "section": "lambda",
    "text": "lambda\n- 예제1: 람다표현식(lambda expression)자체가 하나의 오브젝트임\n\nlambda x: (x-2)**2 ### lambda x: (x-2)**2 가 실행되는 순간 메모리상에 함수 오브젝트가 저장됨 \n\n&lt;function __main__.&lt;lambda&gt;(x)&gt;\n\n\n(사용방법)\n\n(lambda x: (x-2)**2)(2) # 입력2 -&gt; 출력 (2-2)^2 =0 \n\n0\n\n\n\n(lambda x: (x-2)**2)(5) # 입력5 -&gt; 출력 (5-2)^2 =9\n\n9\n\n\n\n(lambda x: (x-2)**2)(6) # 입력6 -&gt; 출력 (6-2)^2 =16\n\n16\n\n\n\n(lambda x: (x-2)**2)(-2) # 입력-2 -&gt; 출력 (-2-2)^2 =16\n\n16\n\n\nquiz\n\\(f(x)=\\sqrt{x}\\) 를 수행하는 함수를 lambda를 이용하여 구성하라.\n\n(lambda x: np.sqrt(x))(2)\n\n1.4142135623730951\n\n\n- 예제2: 람다표현식에 이름을 줄 수 있음.\n\nf = lambda x: (x-2)**2\n\n\nf(2),f(4),f(6),f(-2)\n\n(0, 4, 16, 16)\n\n\n위의 코드는 아래와 같다.\n\ndef f(x):\n    return (x-2)**2\nf(2),f(4),f(6),f(-2)\n\n(0, 4, 16, 16)\n\n\n- 예제3: 조건부 출력\n\nf = lambda x,y: x if x&gt;y else y # x,y가 입력 -&gt; x&gt;y 일때만 x를 리턴하고 그렇지않으면 y를 리턴 = 큰값을 리턴하라는 소리임 \n\n\nf(1,20)\n\n20\n\n\nquiz\n임의의 알파벳 문자열을 입력으로 하고, 알파벳이 대문자이면 “대문자 입니다”를 리턴하고 소문자이면 “소문자 입니다”를 리턴하는 함수를 구성하라.\n(힌트) 아래코드 이용\n\n(lambda x: \"대문자\" if x.isupper() else \"소문자\")('A')\n\n'대문자'\n\n\n- 예제4: 람다표현식들의 리스트\n\nfl = [lambda x: x, lambda x: x**2, lambda x: x**3]\n\n\nfor f in fl: \n    print(f(2))\n\n2\n4\n8\n\n\n\nx = np.linspace(-1,1,100)\nfor f in fl:\n    plt.plot(x,f(x),'--') \n\n\n\n\n\n\n\n\n- 예제5: 람다표현식들의 딕셔너리\n\nfd = {'f1':lambda x: x, 'f2':lambda x: x**2, 'f3':lambda x: x**3}\nfd\n\n{'f1': &lt;function __main__.&lt;lambda&gt;(x)&gt;,\n 'f2': &lt;function __main__.&lt;lambda&gt;(x)&gt;,\n 'f3': &lt;function __main__.&lt;lambda&gt;(x)&gt;}\n\n\n\nfor k in fd:\n    plt.plot(x,fd[k](x),'--')\n\n\n\n\n\n\n\n\n- 예제6: 람다표현식을 리턴하는 함수 (함수를 리턴하는 함수)\n(예비학습) 함수 \\(g(x)\\)가 정의되어 있을때 \\(\\frac{d}{dx}g(x)\\)의 값을 계산해보기\n\ng = lambda x: x**2 \n\n\\(g(x)=x^2\\)\n\\[g'(x)=gg(x)=2x\\approx \\frac{g(x+0.001)-g(x)}{0.001}\\]\n\ngg = lambda x : (g(x+0.001)-g(x))/0.001\n\n\ngg(4)\n\n8.0010000000037\n\n\n(목표) 도함수를 구해주는 derivate 함수를 정의하자. 이 함수는 임의의 함수 g를 입력으로 받으면, g의 도함수(gg)가 리턴되는 기능을 가진다.\n\nderivate = lambda g: (lambda x : (g(x+0.001)-g(x))/0.001)\n\n(사용1)\n\nx = np.linspace(0,6.28,1000) \n\n\ng = lambda x: np.sin(x)\n\n\ngg = derivate(g) \n\n\nplt.plot(x,g(x),label=r'$g(x)=sin(x)$')\nplt.plot(x,gg(x),label=r'$\\frac{d}{dx}g(x)=cos(x)$')\nplt.legend(fontsize=15)\n\n\n\n\n\n\n\n\n(사용2)\n\ng0 = lambda x: (1/6)*x**3\ng1 = derivate(g0) # (1/2)x^2 \ng2 = derivate(g1) # x \n\n\nx = np.linspace(-1,1,100)\nplt.plot(x,g0(x),'--',label=r'$g_0(x)=\\frac{1}{6}x^3$')\nplt.plot(x,g1(x),'--',label=r'$g_1(x)=\\frac{1}{2}x^2$')\nplt.plot(x,g2(x),'--',label=r'$g_2(x)=x$')\nplt.legend(fontsize=15)\n\n\n\n\n\n\n\n\n- 예제7: 예제6의 다른표현\n\nderivate = lambda g: lambda x : (g(x+0.001)-g(x))/0.001\n\n(사용1)\n\ng = lambda x: np.sin(x) \n\n\ngg = derivate(g) \n\n\nx = np.linspace(0,6.28,1000) \n\n\nplt.plot(x,g(x),label=r'$f(x)=sin(x)$')\nplt.plot(x,gg(x),label=r'$\\frac{d}{dx}f(x)=cos(x)$')\nplt.legend(fontsize=15)\n\n\n\n\n\n\n\n\n(사용2)\n\ng0 = lambda x: (1/6)*x**3\ng1 = derivate(g0) # (1/2)x^2 \ng2 = derivate(g1) # x \n\n\nx = np.linspace(-1,1,100)\nplt.plot(x,g0(x),'--',label=r'$g_0(x)=\\frac{1}{6}x^3$')\nplt.plot(x,g1(x),'--',label=r'$g_1(x)=\\frac{1}{2}x^2$')\nplt.plot(x,g2(x),'--',label=r'$g_2(x)=x$')\nplt.legend(fontsize=15)"
  },
  {
    "objectID": "posts/Day2/ls08.html#map",
    "href": "posts/Day2/ls08.html#map",
    "title": "Lesson 08: pandas I",
    "section": "map",
    "text": "map\n- 개념: $(f,[x_1,x_2,,x_n] )=$\n- 예제1:\n\nx = [1,2,3] \nf = lambda x: x+1\ny = list(map(f,x))\nx,y\n\n([1, 2, 3], [2, 3, 4])\n\n\nquiz\n\\(x=[1,2,3,4,5]\\)에 대하여 \\(x^2\\)을 수행하는 함수를 구현하라.\n\nlist(map(lambda x: x**2 ,[1,2,3,4,5]))\n\n[1, 4, 9, 16, 25]\n\n\n- 예제2: 문자열을 입력으로 받고 대문자이면 True, 소문자이면 False\n입력: A,B,C,a,b,c\n출력: T,T,T,F,F,F\n\nlist(map(lambda x: x.isupper(), ['A','B','C','a','b','c']))\n\n[True, True, True, False, False, False]\n\n\n- 예제3: 두개의 입력을 받는 함수 (map을 이용하는 것이 리스트 컴프리헨션보다 조금 편한것 같다)\n\nf= lambda x,y: x+y \nx=[1,2,3]\ny=[-1,-2,-3]\n\n\nlist(map(f,x,y))\n\n[0, 0, 0]\n\n\nquiz\n\nt=np.linspace(-3.14,3.14,100)\nx=np.sin(t)\ny=np.cos(t)\n\n\nplt.plot(t,x)\nplt.plot(t,y)\n\n\n\n\n\n\n\n\n\\(f(x,y) = \\max(x,y)\\) 를 구현하여 \\({\\bf x}\\),\\({\\bf y}\\) 각 원소에 적용하고 결과를 시각화 하라.\n\nplt.plot(list(map(lambda x,y: max(x,y), x,y)))\n\n\n\n\n\n\n\n\n- 종합: map과 리스트컴프리헨션과 비교\n\nmap은 for문을 위한 \\(i\\)등의 인덱스를 쓰지 않지만 리스트컴프리헨션은 필요함\nmap은 좀 더 리스트컴프리헨션보다 제약적으로 사용할 수 밖에 없음."
  },
  {
    "objectID": "posts/Day2/ls08.html#lambda-1",
    "href": "posts/Day2/ls08.html#lambda-1",
    "title": "Lesson 08: pandas I",
    "section": "lambda",
    "text": "lambda\n- 예시1: \\(x \\to x+2\\)\n\nf = lambda x: x+2\nf(1)\n\n3\n\n\n- 예시2: \\(x,y \\to x+y\\)\n\nf = lambda x,y: x+y\nf(1,2)\n\n3\n\n\n- 예시3: ‘2023-09’ \\(\\to\\) 9\n\nf = lambda x: int(x[-2:])\nf('2023-09')\n\n9\n\n\n- 예시4: ‘2023-09’ \\(\\to\\) (2023,9)\n\nf = lambda x: (int(x[:4]),int(x[-2:]))\nf('2023-09')\n\n(2023, 9)\n\n\n- 예시5: 문자열이 ‘cat’이면 1 ’dog’ 이면 0 // ’cat이면 1 ’cat’이 아니면 0\n\nf = lambda x: 1 if x=='cat' else 0\n\n\nf('cat'), f('dog')\n\n(1, 0)\n\n\n- Note: f로 이름을 정하지 않고 직접 사용 가능\n\n(lambda x: x+1)(2)\n\n3"
  },
  {
    "objectID": "posts/Day2/ls08.html#map-1",
    "href": "posts/Day2/ls08.html#map-1",
    "title": "Lesson 08: pandas I",
    "section": "map",
    "text": "map\n- 개념: map(f,[x1,x2,...xn])=[f(x1),f(x2),...,f(xn)]\n- 예시1: x-&gt;x+1을 [1,2,3]에 적용\n\nlist(map(lambda x: x+1, [1,-5,3]))\n\n[2, -4, 4]\n\n\n- 예시2 df.Height열 변환하기\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv').drop(['Loaned From','Best Overall Rating'],axis=1).dropna()\ns = df.Height[:5]\ns\n\n0    189cm\n1    179cm\n2    172cm\n3    181cm\n4    172cm\nName: Height, dtype: object\n\n\n\nx = s[0]\nx\n\n'189cm'\n\n\n\nlist(map(lambda x: int(x.replace('cm','')), s))\n\n[189, 179, 172, 181, 172]\n\n\n# 예시3 df.Height열 변환하기 + 변환된 열 할당하기\n\ndf.assign(\n    Height = list(map(lambda x: int(x.replace('cm','')), df.Height)),\n    Weight = list(map(lambda x: int(x.replace('kg','')), df.Weight)),\n)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189\n82\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179\n69\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172\n69\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181\n70\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172\n68\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190\n78\n€218K\n35.0\nNaN\n\n\n17656\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195\n84\n€188K\n21.0\nNaN\n\n\n17657\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190\n82\n€142K\n12.0\nNaN\n\n\n17658\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187\n79\n€214K\n40.0\nNaN\n\n\n17659\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186\n78\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n#\n# 예시4 – df.Position 열에 아래와 같은 변환을 수행하고, 변환된 열을 할당하라.\n\n\n\nbefore\nafter\n\n\n\n\n&lt;span class=\"pos pos28\"&gt;SUB\nSUB\n\n\n&lt;span class=\"pos pos15\"&gt;LCM\nLCM\n\n\n&lt;span class=\"pos pos7\"&gt;LB\nLB\n\n\n&lt;span class=\"pos pos13\"&gt;RCM\nRCM\n\n\n&lt;span class=\"pos pos13\"&gt;RCM\nRCM\n\n\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv').drop(['Loaned From','Best Overall Rating'],axis=1).dropna()\ndf\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nWork Rate\nBody Type\nReal Face\nPosition\nJoined\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nHigh/ Medium\nUnique\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\n2026\n189cm\n82kg\n€157M\n8.0\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nHigh/ High\nUnique\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\n2026\n179cm\n69kg\n€155M\n8.0\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nHigh/ High\nStocky (170-185)\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\n2024\n172cm\n69kg\n€97.7M\n19.0\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nHigh/ High\nUnique\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\n2025\n181cm\n70kg\n€198.9M\n17.0\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nHigh/ High\nNormal (170-)\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\n2026\n172cm\n68kg\n€154.4M\n23.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nMedium/ Medium\nNormal (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\n2027\n190cm\n78kg\n€218K\n35.0\n\n\n17656\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nMedium/ Medium\nLean (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\n2026\n195cm\n84kg\n€188K\n21.0\n\n\n17657\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nMedium/ Medium\nLean (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\n2023\n190cm\n82kg\n€142K\n12.0\n\n\n17658\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nMedium/ Medium\nNormal (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\n2021\n187cm\n79kg\n€214K\n40.0\n\n\n17659\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nMedium/ Medium\nNormal (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\n2021\n186cm\n78kg\n€131K\n30.0\n\n\n\n\n16364 rows × 27 columns\n\n\n\n\ndf['Position'] = [l.split('&gt;')[-1] for l in df.Position]\ndf\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nWork Rate\nBody Type\nReal Face\nPosition\nJoined\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nHigh/ Medium\nUnique\nYes\nSUB\nJul 1, 2018\n2026\n189cm\n82kg\n€157M\n8.0\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nHigh/ High\nUnique\nYes\nLCM\nJan 30, 2020\n2026\n179cm\n69kg\n€155M\n8.0\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nHigh/ High\nStocky (170-185)\nNo\nLB\nSep 14, 2020\n2024\n172cm\n69kg\n€97.7M\n19.0\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nHigh/ High\nUnique\nYes\nRCM\nAug 30, 2015\n2025\n181cm\n70kg\n€198.9M\n17.0\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nHigh/ High\nNormal (170-)\nYes\nRCM\nSep 1, 2020\n2026\n172cm\n68kg\n€154.4M\n23.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nMedium/ Medium\nNormal (185+)\nNo\nRES\nApr 11, 2022\n2027\n190cm\n78kg\n€218K\n35.0\n\n\n17656\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nMedium/ Medium\nLean (185+)\nNo\nRES\nJan 1, 2022\n2026\n195cm\n84kg\n€188K\n21.0\n\n\n17657\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nMedium/ Medium\nLean (185+)\nNo\nRES\nJun 6, 2021\n2023\n190cm\n82kg\n€142K\n12.0\n\n\n17658\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nMedium/ Medium\nNormal (185+)\nNo\nRES\nJan 1, 2020\n2021\n187cm\n79kg\n€214K\n40.0\n\n\n17659\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nMedium/ Medium\nNormal (185+)\nNo\nRES\nJan 8, 2020\n2021\n186cm\n78kg\n€131K\n30.0\n\n\n\n\n16364 rows × 27 columns"
  },
  {
    "objectID": "posts/Day2/ls08.html#s.apply변환함수",
    "href": "posts/Day2/ls08.html#s.apply변환함수",
    "title": "Lesson 08: pandas I",
    "section": "s.apply(변환함수)",
    "text": "s.apply(변환함수)\n- 예시1: 원소별로 처음3개의 숫자만 출력\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\n\n\ndf.Height.apply(lambda x: int(x.replace('cm',''))) \n\n0        189\n1        179\n2        172\n3        181\n4        172\n        ... \n17655    190\n17656    195\n17657    190\n17658    187\n17659    186\nName: Height, Length: 17660, dtype: int64\n\n\n- 예시2: 원소별로 처음3개의 문자만 출력 \\(\\to\\) str자료형을 int자료형으로 변환\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\n\n(방법1) – 한번에\n\ndf.Height.apply(lambda x: int(x[:3]))\n\n0        189\n1        179\n2        172\n3        181\n4        172\n        ... \n17655    190\n17656    195\n17657    190\n17658    187\n17659    186\nName: Height, Length: 17660, dtype: int64\n\n\n(방법2) – 연쇄적으로..\n\ndf.Height.apply(lambda x: x[:3]).apply(int)\n\n0        189\n1        179\n2        172\n3        181\n4        172\n        ... \n17655    190\n17656    195\n17657    190\n17658    187\n17659    186\nName: Height, Length: 17660, dtype: int64"
  },
  {
    "objectID": "posts/Day2/ls05.html#선언",
    "href": "posts/Day2/ls05.html#선언",
    "title": "Lesson 05: numpy I",
    "section": "선언",
    "text": "선언\n\na=np.array([1,2,3]) # list를 만들고 ndarray화 시킴 \nl=[1,2,3]\n\n기본연산 브로드캐스팅\n\na+1 ## [1,2,3] + 1 = [2,3,4]\n\narray([2, 3, 4])\n\n\n\nl+1\n\nTypeError: can only concatenate list (not \"int\") to list\n\n\n\na*2\n\narray([2, 4, 6])\n\n\n\nl*2\n\n[1, 2, 3, 1, 2, 3]\n\n\n\na/2\n\narray([0.5, 1. , 1.5])\n\n\n\nl/2\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n\na**2\n\narray([1, 4, 9])\n\n\n\nl**2\n\nTypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'\n\n\n\na%2 # %2 = 2로 나눈 나머지를 리턴 a=[1,2,3] \n\narray([1, 0, 1])\n\n\n\na%2 \n\narray([1, 0, 1])\n\n\n\nl%2\n\nTypeError: unsupported operand type(s) for %: 'list' and 'int'"
  },
  {
    "objectID": "posts/Day2/ls05.html#기타수학연산지원",
    "href": "posts/Day2/ls05.html#기타수학연산지원",
    "title": "Lesson 05: numpy I",
    "section": "기타수학연산지원",
    "text": "기타수학연산지원\n\nnp.sqrt(a), np.sqrt(l)\n\n(array([1.        , 1.41421356, 1.73205081]),\n array([1.        , 1.41421356, 1.73205081]))\n\n\n\nnp.log(a), np.log(l)\n\n(array([0.        , 0.69314718, 1.09861229]),\n array([0.        , 0.69314718, 1.09861229]))\n\n\n\nnp.exp(a), np.exp(l)\n\n(array([ 2.71828183,  7.3890561 , 20.08553692]),\n array([ 2.71828183,  7.3890561 , 20.08553692]))\n\n\n\nnp.sin(a), np.sin(l)\n\n(array([0.84147098, 0.90929743, 0.14112001]),\n array([0.84147098, 0.90929743, 0.14112001]))"
  },
  {
    "objectID": "posts/Day2/ls05.html#인덱싱-1차원",
    "href": "posts/Day2/ls05.html#인덱싱-1차원",
    "title": "Lesson 05: numpy I",
    "section": "인덱싱 1차원",
    "text": "인덱싱 1차원\n- 선언\n\nl=[11,22,33,44,55,66] \na=np.array(l) \n\n- 인덱스로 접근\n\nl[0],l[1],l[2],l[3],l[-2],l[-1]\n\n(11, 22, 33, 44, 55, 66)\n\n\n\na[0],a[1],a[2],a[3],a[-2],a[-1]\n\n(11, 22, 33, 44, 55, 66)\n\n\n- : 이용 (슬라이싱)\n\nl[2:4] # index 2에서 시작, index 4는 포함하지 않음 \n\n[33, 44]\n\n\n\na[2:4] \n\narray([33, 44])\n\n\n- 정수배열에 의한 인덱싱\n\na[[0,2,4]] # index=0, index=2, index=4 에 해당하는 원소를 뽑고 싶다 \n\narray([11, 33, 55])\n\n\n\nl[[0,2,4]] # 리스트는 불가능 \n\nTypeError: list indices must be integers or slices, not list\n\n\n- 부울값에 의한 인덱싱\n\na[[True,False,True,False,True,False]] \n\narray([11, 33, 55])\n\n\n응용하면?\n\na &lt; 33 \n\narray([ True,  True, False, False, False, False])\n\n\n\na[a&lt;33]\n\narray([11, 22])\n\n\n리스트는 불가능\n\nl&lt;33 # 여기에서부터 불가능 \n\nTypeError: '&lt;' not supported between instances of 'list' and 'int'\n\n\n\nl[[True,False,True,False,True,False]] # 이것도 불가능 \n\nTypeError: list indices must be integers or slices, not list"
  },
  {
    "objectID": "posts/Day2/ls05.html#인덱싱-2차원",
    "href": "posts/Day2/ls05.html#인덱싱-2차원",
    "title": "Lesson 05: numpy I",
    "section": "인덱싱 2차원",
    "text": "인덱싱 2차원\n- 중첩리스트와 2차원 np.array 선언\n\nA = [[1,2,3,4],[-1,-2,-3,-4],[5,6,7,8],[-5,-6,-7,-8]]\nA2 = np.array(A)\n\n\nA2\n\narray([[ 1,  2,  3,  4],\n       [-1, -2, -3, -4],\n       [ 5,  6,  7,  8],\n       [-5, -6, -7, -8]])\n\n\n\nA\n\n[[1, 2, 3, 4], [-1, -2, -3, -4], [5, 6, 7, 8], [-5, -6, -7, -8]]\n\n\n- A의 원소 인덱싱\n\nA[0][0] # (1,1)의 원소 \n\n1\n\n\n\nA[1][2] # (2,3)의 원소 \n\n-3\n\n\n\nA[-1][0] # (4,1)의 원소 \n\n-5\n\n\n- A2의 원소 인덱싱\n\nA2[0][0] # (1,1)의 원소 \n\n1\n\n\n\nA2[1][2] # (2,3)의 원소 \n\n-3\n\n\n\nA2[-1][0] # (4,1)의 원소 \n\n-5\n\n\n- A2에서만 되는 기술 (넘파이에서 제시하는 신기술, R에서는 기본적으로 쓰던것, 이중list는 불가능)\n\nA2[0,0] # (1,1)의 원소 \n\n1\n\n\n\nA2[1,2] # (2,3)의 원소 \n\n-3\n\n\n\nA2[-1,0] # (4,1)의 원소 \n\n-5\n\n\n- 정수배열에 의한 인덱싱 & 슬라이싱!\n\nA2\n\narray([[ 1,  2,  3,  4],\n       [-1, -2, -3, -4],\n       [ 5,  6,  7,  8],\n       [-5, -6, -7, -8]])\n\n\n\nA2[0,0:2] # 1행1열, 1행2열 \n\narray([1, 2])\n\n\n\nA2[0,:] # 1행 \n\narray([1, 2, 3, 4])\n\n\n\nA2[0] # 1행\n\narray([1, 2, 3, 4])\n\n\n\nA2[[0,2],:] # 1행, 3행 \n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nA2[[0,2]] # 1행, 3행 \n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nA2[:,0] # 1열 \n\narray([ 1, -1,  5, -5])\n\n\n\nA2[:,[0]] # 1열 \n\narray([[ 1],\n       [-1],\n       [ 5],\n       [-5]])\n\n\n\nA2[:,[0,2]] # 1열, 3열\n\narray([[ 1,  3],\n       [-1, -3],\n       [ 5,  7],\n       [-5, -7]])\n\n\n\nA2[0:2,[0,2]] # 1행~2행 //  1열,3열 \n\narray([[ 1,  3],\n       [-1, -3]])"
  },
  {
    "objectID": "posts/Day2/ls05.html#차원-배열의-선언",
    "href": "posts/Day2/ls05.html#차원-배열의-선언",
    "title": "Lesson 05: numpy I",
    "section": "1차원 배열의 선언",
    "text": "1차원 배열의 선언\n- 리스트나 튜플을 선언하고 형변환\n\nnp.array((1,2,3)) # 튜플-&gt;넘파이어레이 \n\narray([1, 2, 3])\n\n\n\nnp.array([1,2,3]) # 리스트 -&gt;넘파이어레이 \n\narray([1, 2, 3])\n\n\n- range()를 이용해서 선언하고 형변환\n\nnp.array(range(10)) # range(10) -&gt; 넘파이어레이 \n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n- np.zeros, np.ones\n\nnp.zeros(3) \n\narray([0., 0., 0.])\n\n\n\nnp.ones(4)\n\narray([1., 1., 1., 1.])\n\n\n- np.linspace\n\nnp.linspace(0,1,12) # 0에서 시작하고 1에서 끝남 (양끝점 모두 포함)\n\narray([0.        , 0.09090909, 0.18181818, 0.27272727, 0.36363636,\n       0.45454545, 0.54545455, 0.63636364, 0.72727273, 0.81818182,\n       0.90909091, 1.        ])\n\n\n\nlen(np.linspace(0,1,12)) # 길이는 12\n\n12\n\n\n- np.arange\n\nnp.arange(5) # np.array(range(5))\n\narray([0, 1, 2, 3, 4])\n\n\n\nnp.arange(1,6) # np.array(range(1,6))\n\narray([1, 2, 3, 4, 5])"
  },
  {
    "objectID": "posts/Day2/ls05.html#reshape",
    "href": "posts/Day2/ls05.html#reshape",
    "title": "Lesson 05: numpy I",
    "section": "reshape",
    "text": "reshape\n- reshape: ndarray의 특수한 기능\n\na=np.array([11,22,33,44,55,66])\na ## 길이가 6인 벡터 \n\narray([11, 22, 33, 44, 55, 66])\n\n\n\na.reshape(2,3) ## (2,3) matrix 라고 생각해도 무방 \n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\nnote: reshape은 a자체를 변화시키는것은 아님\n\na # a는 그대로 있음 \n\narray([11, 22, 33, 44, 55, 66])\n\n\n\nb= a.reshape(2,3) # a를 reshape한 결과를 b에 저장 \nb\n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\n\na # a는 여전히 그대로 있음\n\narray([11, 22, 33, 44, 55, 66])\n\n\n- 다시 b를 a처럼 바꾸고 싶다\n\nb\n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\n\nb.reshape(6) # b는 (2,3) matrix , 그런데 이것을 길이가 6인 벡터로 만들고 싶다. \n\narray([11, 22, 33, 44, 55, 66])\n\n\n- reshape with -1\n\na=np.arange(24) # np.array(range(24))\na\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])\n\n\n\na.reshape(2,-1)\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(3,-1)\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7],\n       [ 8,  9, 10, 11, 12, 13, 14, 15],\n       [16, 17, 18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(4,-1)\n\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23]])\n\n\n\na.reshape(5,-1)\n\nValueError: cannot reshape array of size 24 into shape (5,newaxis)\n\n\n\na.reshape(6,-1)\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23]])\n\n\n\na.reshape(7,-1)\n\nValueError: cannot reshape array of size 24 into shape (7,newaxis)\n\n\n\na.reshape(8,-1)\n\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14],\n       [15, 16, 17],\n       [18, 19, 20],\n       [21, 22, 23]])\n\n\n\na.reshape(12,-1)\n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 4,  5],\n       [ 6,  7],\n       [ 8,  9],\n       [10, 11],\n       [12, 13],\n       [14, 15],\n       [16, 17],\n       [18, 19],\n       [20, 21],\n       [22, 23]])\n\n\n\nb= a.reshape(12,-1)\nb\n\narray([[ 0,  1],\n       [ 2,  3],\n       [ 4,  5],\n       [ 6,  7],\n       [ 8,  9],\n       [10, 11],\n       [12, 13],\n       [14, 15],\n       [16, 17],\n       [18, 19],\n       [20, 21],\n       [22, 23]])\n\n\n\nb.reshape(-1) # b를 다시 길이가 24인 벡터로!\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23])"
  },
  {
    "objectID": "posts/Day2/ls05.html#차원-배열의-선언-1",
    "href": "posts/Day2/ls05.html#차원-배열의-선언-1",
    "title": "Lesson 05: numpy I",
    "section": "2차원 배열의 선언",
    "text": "2차원 배열의 선언\n\nnp.zeros((3,3))\n\narray([[0., 0., 0.],\n       [0., 0., 0.],\n       [0., 0., 0.]])\n\n\n\nnp.ones((3,3))\n\narray([[1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.]])\n\n\n\nnp.eye(3)\n\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n\n\n\nnp.diag([1,2,3,-1])\n\narray([[ 1,  0,  0,  0],\n       [ 0,  2,  0,  0],\n       [ 0,  0,  3,  0],\n       [ 0,  0,  0, -1]])"
  },
  {
    "objectID": "posts/Day2/ls05.html#랜덤으로-배열-생성",
    "href": "posts/Day2/ls05.html#랜덤으로-배열-생성",
    "title": "Lesson 05: numpy I",
    "section": "랜덤으로 배열 생성",
    "text": "랜덤으로 배열 생성\n\nnp.random.randn(10) # 표쥰정규분포에서 10개를 뽑음 \n\narray([-1.41254126, -1.78825833,  1.57552918, -1.25488578, -0.94708306,\n       -0.11765203, -0.84827525,  0.10447358,  0.41467199,  0.38905239])\n\n\n\nnp.random.rand(10) # 0~1사이에서 10개를 뽑음\n\narray([0.67729671, 0.19584606, 0.4564896 , 0.9308976 , 0.49080792,\n       0.03410752, 0.47480477, 0.44519947, 0.20608611, 0.85576604])\n\n\n\nnp.random.randn(4).reshape(2,2) # 표준정규분포에서 4개를 뽑고 (2,2) ndarray로 형태변환 \n\narray([[-0.97378852,  0.5250826 ],\n       [-0.97400213, -0.59600022]])\n\n\n\nnp.random.rand(4).reshape(2,2) # 0~1 4개를 뽑고 (2,2) ndarray로 형태변환 \n\narray([[0.03708309, 0.56122376],\n       [0.80934488, 0.65723348]])"
  },
  {
    "objectID": "posts/Day2/ls05.html#행렬관련기능",
    "href": "posts/Day2/ls05.html#행렬관련기능",
    "title": "Lesson 05: numpy I",
    "section": "행렬관련기능",
    "text": "행렬관련기능\n\nA=np.arange(4).reshape(2,2) \nA\n\narray([[0, 1],\n       [2, 3]])\n\n\n\nA.T # .T는 전치행렬을 구해줌 \n\narray([[0, 2],\n       [1, 3]])\n\n\n\nnp.linalg.inv(A) # np.linalg.inv는 역행렬을 구해주는 함수 \n\narray([[-1.5,  0.5],\n       [ 1. ,  0. ]])\n\n\n\nA @ np.linalg.inv(A) # @는 행렬곱을 수행 \n\narray([[1., 0.],\n       [0., 1.]])"
  },
  {
    "objectID": "posts/Day2/ls05.html#차원",
    "href": "posts/Day2/ls05.html#차원",
    "title": "Lesson 05: numpy I",
    "section": "차원",
    "text": "차원\n- 넘파이배열의 차원은 .shape 으로 확인가능\n- 아래는 모두 미묘하게 다르다.\n\na=np.array(3.14) # 스칼라, 0d array \na, a.shape\n\n(array(3.14), ())\n\n\n\na=np.array([3.14]) # 벡터, 1d array \na, a.shape\n\n(array([3.14]), (1,))\n\n\n\na=np.array([[3.14]]) # 매트릭스, 2d array \na, a.shape\n\n(array([[3.14]]), (1, 1))\n\n\n\na=np.array([[[3.14]]]) # 텐서, 3d array \na, a.shape\n\n(array([[[3.14]]]), (1, 1, 1))"
  },
  {
    "objectID": "posts/Day1/ls04.html#intro-str-list-tuple-정리",
    "href": "posts/Day1/ls04.html#intro-str-list-tuple-정리",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "intro: str, list, tuple 정리",
    "text": "intro: str, list, tuple 정리\n- str, list, tuple은 모두 시퀀스형이라는 공통점이 있다. \\(\\to\\) 원소의 위치번호로 인덱싱이 가능\n\nlst = [1,2,3,4]\n\n\nlst[0] # 위치번호=0\n\n1\n\n\n\nlst[-1] # 위치번호=-1\n\n4\n\n\n- str, list, tuple은 차이점도 존재함. 잠깐 정리해보자.\n시퀀스형의 카테고리\n\n컨테니어형: list, tuple\n균일형: str\n가변형: list\n불변형: tuple, str\n\n표로 정리하면\n\n\n\n\n컨테니어형\n균일형\n\n\n\n\n가변형\nlist\n.\n\n\n불변형\ntuple\nstr\n\n\n\n- 시퀀스형이 아닌 1차원 자료형도 있을까? 원소의 위치번호로 인덱싱이 불가능한 자료형\n- 왜 이런게 필요할까?\n\n벡터에서 원소를 뽑는것은 정보의 모임에서 정보를 검색하는 것과 같다.\n정보를 순서대로 나열한뒤에 그 순서를 이용하여 검색하는 방법은 유용하다.\n하지만 경우에 따라서는 키워드를 기억해서 그 키워드를 바탕으로 정보에 접근하는 방법이 유용할 수 있다.\n\n카카오톡 대화내용검색\n(상황1) 오늘아침에 와이프가 뭔가를 카톡으로 부탁했었음. 그런데 그 뭔가가 기억안남.\n(상황2) 개강전에 동료교수와 함께 저녁약속을 카톡으로 잡았었음. 그런데 그게 언제인지 기억안남.\n(상황3) 오늘아침 동료교수와 함께 점심약속을 카톡으로 잡았었음. 그런데 그 장소가 기억나지 않음.\n- 순서대로 정리된 자료를 검색할때는 시퀀스형이 유리하다. 그런데 키워드로 검색하고 싶을 경우는 딕셔너리 타입이 유리하다."
  },
  {
    "objectID": "posts/Day1/ls04.html#선언",
    "href": "posts/Day1/ls04.html#선언",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "선언",
    "text": "선언\n\ndct = {'guebin': 49, 'hanni': 80}\ndct \n\n{'guebin': 49, 'hanni': 80}"
  },
  {
    "objectID": "posts/Day1/ls04.html#원소추출",
    "href": "posts/Day1/ls04.html#원소추출",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "원소추출",
    "text": "원소추출\n- 원소의 위치로 추출할 수 없고, key로 추출해야 한다.\n\ndct = {'guebin':49, 'hanni':80}\ndct\n\n{'guebin': 49, 'hanni': 80}\n\n\nguebin의 점수를 추출하고 싶다면?\n\ndct['guebin']\n\n49\n\n\n- 만약에 dict가 아니라 list로 정보를 저장했다면?\n(예제) 아래와 같은 리스트에서 guebin의 점수를 추출하고 싶다면?\n\nlst=[['guebin',49],['hanni',80]]\nlst\n\n[['guebin', 49], ['hanni', 80]]\n\n\n(풀이1)\n\nlst[0][1] # guebin의 점수를 출력하란 의미\n\n49\n\n\n(풀이2) – 진짜 최악\n\n[lst[i][1] for i in range(len(lst)) if lst[i][0] == 'guebin']\n\n[49]\n\n\n(풀이3) – 덜 최악\n\n[score for name,score in lst if name == 'guebin']\n\n[49]\n\n\n- ’guebin’의 점수를 추출하는 제일 쉬운 코드\n\ndict(lst)['guebin']\n\n49"
  },
  {
    "objectID": "posts/Day1/ls04.html#원소추가-변경",
    "href": "posts/Day1/ls04.html#원소추가-변경",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "원소추가, 변경",
    "text": "원소추가, 변경\n\ndct={'guebin':49, 'hanni':80}\ndct\n\n{'guebin': 49, 'hanni': 80}\n\n\n- 원소에 접근: guebin의 점수 출력\n\ndct['guebin']\n\n49\n\n\n- 추가: hynn학생의 점수를 추가\n\ndct['hynn'] = 99\n\n\ndct\n\n{'guebin': 49, 'hanni': 80, 'hynn': 99}\n\n\n- 변경: hanni의 점수를 변경\n\ndct['hanni'] = 100 \n\n\ndct\n\n{'guebin': 49, 'hanni': 100, 'hynn': 99}"
  },
  {
    "objectID": "posts/Day1/ls04.html#연산",
    "href": "posts/Day1/ls04.html#연산",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "연산",
    "text": "연산\n- 하나있어요..\n\ndct = {'guebin':49, 'hanni':80} \ndct\n\n{'guebin': 49, 'hanni': 80}\n\n\n\n'guebin' in dct\n\nTrue\n\n\n\n'hanni' in dct\n\nTrue\n\n\n\n'hynn' in dct\n\nFalse"
  },
  {
    "objectID": "posts/Day1/ls04.html#딕셔너리-특수기능",
    "href": "posts/Day1/ls04.html#딕셔너리-특수기능",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "딕셔너리 특수기능",
    "text": "딕셔너리 특수기능\n(pop)\n\ndct = {'guebin':49, 'hanni':80} \ndct.pop('hanni')\ndct\n\n{'guebin': 49}\n\n\n(get)\n\ndct = {'guebin':49, 'hanni':80} \ndct\n\n{'guebin': 49, 'hanni': 80}\n\n\n\ndct.get('guebin') \n\n49\n\n\n아래와 같은 기능\n\ndct['guebin']\n\n49\n\n\n미묘한 차이점이 존재함\n\ndct['hynn'] # hynn이 없어서 키에러 출력, 그런 key는 없다.. \n\nKeyError: 'hynn'\n\n\n\ndct.get('hynn') # hynn이 없으면 아무것도 출력안함 \n\n(keys,values,items)\n- .keys()는 딕셔너리의 키를 리턴한다.\n\ndct = {'guebin':49, 'hanni':80} \ndct\n\n{'guebin': 49, 'hanni': 80}\n\n\n\n_keys=dct.keys()\n_keys\n\ndict_keys(['guebin', 'hanni'])\n\n\n\ntype(_keys) # 리턴된 자료형은 이상한것임\n\ndict_keys\n\n\n\nlist(_keys) # 아무튼 그 이상한 자료형도 리스트화 가능 \n\n['guebin', 'hanni']\n\n\n- .values()는 딕셔너리의 값들을 리턴한다.\n\n_values = dct.values()\n_values \n\ndict_values([49, 80])\n\n\n\ntype(_values)\n\ndict_values\n\n\n\nlist(_values)\n\n[49, 80]\n\n\n- .items()는 딕셔너리의 (키,값)을 리턴한다.\n\n_items = dct.items()\n_items \n\ndict_items([('guebin', 49), ('hanni', 80)])\n\n\n\ntype(_items)\n\ndict_items\n\n\n\nlist(_items)\n\n[('guebin', 49), ('hanni', 80)]"
  },
  {
    "objectID": "posts/Day1/ls04.html#for문과-dict-star",
    "href": "posts/Day1/ls04.html#for문과-dict-star",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "for문과 dict (\\(\\star\\))",
    "text": "for문과 dict (\\(\\star\\))\n\ndct = {'guebin': 49, 'hanni': 80}\ndct\n\n{'guebin': 49, 'hanni': 80}\n\n\n(예시1)\n\nfor k in dct.keys():\n    print(k)\n\nguebin\nhanni\n\n\n\nfor k in dct:\n    print(k)\n\nguebin\nhanni\n\n\n\n딕셔너리 그자체도 for문에 넣을 수 있다.\nk에는 value가 삭제되어 들어간다. (즉 key만)\n결과를 보면 dct 대신에 dct.keys()와 list(dct)를 넣었을때와 결과가 같다.\n\n\nNote: list(dct) 하면 key만 리턴된다.\n\n(예시2)\n\nfor v in dct.values():\n    print(v)\n\n49\n80\n\n\n(예시3)\n\nfor i in dct.items():\n    print(i)\n\n('guebin', 49)\n('hanni', 80)\n\n\n(예시4)\n\nfor k,v in dct.items():\n    print(k,v)\n\nguebin 49\nhanni 80\n\n\n(예시5) – {}의 중간고사 점수는 {}점 입니다.\n\nfor k,v in dct.items():\n    print('{}의 중간고사 점수는 {}점입니다.'.format(k,v))\n\nguebin의 중간고사 점수는 49점입니다.\nhanni의 중간고사 점수는 80점입니다."
  },
  {
    "objectID": "posts/Day1/ls04.html#dict에서-key혹은-value만-뽑아내기",
    "href": "posts/Day1/ls04.html#dict에서-key혹은-value만-뽑아내기",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "dict에서 key혹은 value만 뽑아내기",
    "text": "dict에서 key혹은 value만 뽑아내기\n- 예제: 아래의 dict에서 key만 뽑아내고 싶다.\n\ndct = {'guebin':49, 'hanni':80} \n\n(풀이1)\n\nlist(dct.keys())\n\n['guebin', 'hanni']\n\n\n(풀이2)\n\n[k for k,v in dct.items()]\n\n['guebin', 'hanni']\n\n\n- 예제: 아래의 dict에서 value만 뽑아내고 싶다.\n\ndct = {'guebin':49, 'hanni':80} \n\n(풀이)\n\n[v for k,v in dct.items()]\n\n[49, 80]"
  },
  {
    "objectID": "posts/Day1/ls04.html#바꿔치기-1",
    "href": "posts/Day1/ls04.html#바꿔치기-1",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "바꿔치기 (1)",
    "text": "바꿔치기 (1)\n- 예제1: 아래와 같은 리스트가 있다고 하자.\n\nlst = list('abcd'*2)\nlst\n\n['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']\n\n\n아래의 규칙에 의하여 lst의 각 원소의 값을 바꾸고 싶다고 하자. 이를 구현하는 코드를 작성하라.\n\n\n\n변환전\n변환후\n\n\n\n\n‘a’\n[1,0,0,0]\n\n\n‘b’\n[0,1,0,0]\n\n\n‘c’\n[0,0,1,0]\n\n\n‘d’\n[0,0,0,1]\n\n\n\nhint: 아래의 dct를 이용할 것\n\nlst = list('abcd'*2)\nlst\n\n['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']\n\n\n\ndct = {'a':[1,0,0,0], 'b':[0,1,0,0], 'c':[0,0,1,0], 'd':[0,0,0,1]}\ndct\n\n{'a': [1, 0, 0, 0], 'b': [0, 1, 0, 0], 'c': [0, 0, 1, 0], 'd': [0, 0, 0, 1]}\n\n\n(풀이)\n\n[dct[x] for x in lst]\n\n[[1, 0, 0, 0],\n [0, 1, 0, 0],\n [0, 0, 1, 0],\n [0, 0, 0, 1],\n [1, 0, 0, 0],\n [0, 1, 0, 0],\n [0, 0, 1, 0],\n [0, 0, 0, 1]]\n\n\n- 예제2: 예제1을 역변환하라.\n\nlst= [[1, 0, 0, 0], #a\n      [0, 1, 0, 0], #b\n      [0, 0, 1, 0], #c\n      [0, 0, 0, 1], #d\n      [1, 0, 0, 0],\n      [0, 1, 0, 0],\n      [0, 0, 1, 0],\n      [0, 0, 0, 1]]\nlst \n\n[[1, 0, 0, 0],\n [0, 1, 0, 0],\n [0, 0, 1, 0],\n [0, 0, 0, 1],\n [1, 0, 0, 0],\n [0, 1, 0, 0],\n [0, 0, 1, 0],\n [0, 0, 0, 1]]\n\n\n\ndct = {'a':[1,0,0,0], 'b':[0,1,0,0], 'c':[0,0,1,0], 'd':[0,0,0,1]}\n\n(풀이)\n\n[k for l in lst for k,v in dct.items() if l == v]\n\n['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']"
  },
  {
    "objectID": "posts/Day1/ls04.html#바꿔치기-2",
    "href": "posts/Day1/ls04.html#바꿔치기-2",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "바꿔치기 (2)",
    "text": "바꿔치기 (2)\n- 예제1: 아래와 같은 리스트를 고려하자.\n\nlst = ['딸기','사과','바나나','딸기','사과','오토바이','자동차','버스','기차','오토바이','자동차']\n\n다음의 맵핑규칙에 따라서 위의 리스트의 원소를 바꾸어라.\n\n\n\n변환전\n변환후\n\n\n\n\n딸기\n과일\n\n\n사과\n과일\n\n\n바나나\n과일\n\n\n오토바이\n탈것\n\n\n자동차\n탈것\n\n\n버스\n탈것\n\n\n기차\n탈것\n\n\n\n(풀이)\n\ndct = {'과일':['딸기','사과','바나나'], '탈것':['오토바이','자동차','버스','기차']}\ndct\n\n{'과일': ['딸기', '사과', '바나나'], '탈것': ['오토바이', '자동차', '버스', '기차']}\n\n\n\n[x for l in lst for x,y in dct.items() if l in y]\n\n['과일', '과일', '탈것']"
  },
  {
    "objectID": "posts/Day1/ls04.html#선언-1",
    "href": "posts/Day1/ls04.html#선언-1",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "선언",
    "text": "선언\n\nwishlist={'notebook','desktop'}\nwishlist\n\n{'desktop', 'notebook'}"
  },
  {
    "objectID": "posts/Day1/ls04.html#원소추출-1",
    "href": "posts/Day1/ls04.html#원소추출-1",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "원소추출",
    "text": "원소추출\n- 일단 인덱스로는 못합니다.\n\nwishlist={'notebook','desktop'}\nwishlist[0]\n\nTypeError: 'set' object is not subscriptable\n\n\n- 딱히 하는 방법이 없어요.. 그리고 이걸 하는 의미가 없어요.. (원소에 접근해서 뭐하려고??)"
  },
  {
    "objectID": "posts/Day1/ls04.html#원소추가",
    "href": "posts/Day1/ls04.html#원소추가",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "원소추가",
    "text": "원소추가\n- 이건 의미가 있음\n\nwishlist={'notebook','desktop'} \nwishlist\n\n{'desktop', 'notebook'}\n\n\n\nwishlist.add('ipad')\nwishlist\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\nwishlist.add('notebook') # 이미 원소로 있는건 추가되지 않음. \nwishlist\n\n{'desktop', 'ipad', 'notebook'}"
  },
  {
    "objectID": "posts/Day1/ls04.html#원소삭제",
    "href": "posts/Day1/ls04.html#원소삭제",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "원소삭제",
    "text": "원소삭제\n\nwishlist={'desktop', 'ipad', 'notebook'}\nwishlist\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\nwishlist.remove('notebook')\n\n\nwishlist\n\n{'desktop', 'ipad'}"
  },
  {
    "objectID": "posts/Day1/ls04.html#연산-1",
    "href": "posts/Day1/ls04.html#연산-1",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "연산",
    "text": "연산\n- in 연산자\n\nwishlist={'desktop', 'ipad', 'notebook'}\nwishlist\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\n'notebook' in wishlist\n\nTrue\n\n\n\n참고로 in연산자는 집합에서만 쓰는것은 아님\n\n- 합집합, 교집합, 차집합\n\nday1 = {'notebook','desktop'}\nday2 = {'notebook','ipad'}\n\n\nday1 | day2 # 합집합\n\n{'desktop', 'ipad', 'notebook'}\n\n\n\nday1 & day2 # 교집합\n\n{'notebook'}\n\n\n\nday1 - day2 # 차집합 \n\n{'desktop'}\n\n\n\nday2 - day1 # 차집합\n\n{'ipad'}\n\n\n- 부분집합\n\nday1 = {'notebook', 'desktop'}\nday2 = day1 | {'ipad'} \n\n\nday1 &lt; day2  # day1는 day2의 부분집합인가? \n\nTrue\n\n\n\nday2 &lt; day1\n\nFalse"
  },
  {
    "objectID": "posts/Day1/ls04.html#집합-특수기능",
    "href": "posts/Day1/ls04.html#집합-특수기능",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "집합 특수기능",
    "text": "집합 특수기능\n- 합집합\n\nday1 = {'notebook', 'desktop'}\nday2 = {'notebook','ipad'}\n\n\nday1.union(day2)\n\n{'desktop', 'ipad', 'notebook'}\n\n\n- 나머지 메소드는 스스로 찾아보세요"
  },
  {
    "objectID": "posts/Day1/ls04.html#for문과-set",
    "href": "posts/Day1/ls04.html#for문과-set",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "for문과 set",
    "text": "for문과 set\n\nday1 = {'notebook', 'desktop'}\nday2 = {'notebook', 'ipad'}\n\n\nfor i in day1|day2: \n    print(i)\n\nnotebook\nipad\ndesktop"
  },
  {
    "objectID": "posts/Day1/ls04.html#set-컴프리헨션",
    "href": "posts/Day1/ls04.html#set-컴프리헨션",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "set 컴프리헨션",
    "text": "set 컴프리헨션\n- 예시1\n\nlst = [1,2,1,1,3,4,5]\n{l for l in lst}\n\n{1, 2, 3, 4, 5}"
  },
  {
    "objectID": "posts/Day1/ls04.html#유니크한-원소",
    "href": "posts/Day1/ls04.html#유니크한-원소",
    "title": "Lesson 04: 파이썬의 자료형 III (dict, set)",
    "section": "유니크한 원소",
    "text": "유니크한 원소\n- 예제1: 아래의 list는 모두 몇 종류의 문자로 이루어져 있는가?\n\nlst=list('asdfasssdfdsasdfasdfasdfasdf')\n\n(풀이)\n\nset(lst)\n\n{'a', 'd', 'f', 's'}\n\n\n\nlen(set(lst))\n\n4\n\n\n- 예제2: 아래의 txt에서 어떠한 종류의 문자가 각각 몇번씩 사용되었는지 빈도를 구하는 코드를 작성하라.\n\ntxt = 'asdkflkjahsdlkjfhlaksglkjdhflkgjhlskdfjhglkajhsdlkfjhalsdkf'\ntxt\n\n'asdkflkjahsdlkjfhlaksglkjdhflkgjhlskdfjhglkajhsdlkfjhalsdkf'\n\n\n(풀이)\n\n{k:list(txt).count(k) for k in set(txt)}\n\n{'s': 6, 'a': 5, 'g': 3, 'k': 10, 'j': 7, 'h': 7, 'd': 6, 'l': 9, 'f': 6}"
  },
  {
    "objectID": "posts/Day1/ls02.html#선언",
    "href": "posts/Day1/ls02.html#선언",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "선언",
    "text": "선언\n- 리스트의 선언\n\na=[11,22]\na\n\n[11, 22]\n\n\n\ntype(a)\n\nlist\n\n\n- 비어있는 리스트의 선언\n\na=[] # 방법1\na\n\n[]\n\n\n\na=list() # 방법2\na\n\n[]"
  },
  {
    "objectID": "posts/Day1/ls02.html#연산",
    "href": "posts/Day1/ls02.html#연산",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "연산",
    "text": "연산\n- 더하기연산\n\na=[11,12]\nb=[12,13]\n\n\na\n\n[11, 12]\n\n\n\nb\n\n[12, 13]\n\n\n\na+b\n\n[11, 12, 12, 13]\n\n\n\n우리의 예상과 다른 결과가 나옴 \\(\\to\\) 파이썬은 R처럼 자체적으로 좋은 계산기능을 내장하고 있지 않음.\n\n- 브로드캐스팅과 같이 R에서는 당연히 가능했던 기능을 사용할 수 없음.\n\na=[1,2,3]\nb=1\na+b\n\nTypeError: can only concatenate list (not \"int\") to list\n\n\n- 뺄셈은 정의되지 않음\n\na=[1,2]\nb=[1,2]\na-b\n\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n\n- 곱하기는 정의가능\n\na=[1,2]\n\n\n2*a # a+a \n\n[1, 2, 1, 2]\n\n\n- 나눗셈은 정의되지 않음\n\na=[1,2,1,2]\na/2\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n- 더하기와 곱하기는 원소의 추가와 반복추가를 의미하지만 그렇다고 해서 뺄셈과 나눗셈이 원소의 삭제를 의미하는것은 아님\n\na=[1,2,3]\na-[3] # 이런건 없다\n\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\n\n\na=[1,2,1,2,1,2]\na/3 # 이런건 없다\n\nTypeError: unsupported operand type(s) for /: 'list' and 'int'\n\n\n- 더하기와 곱하기가 원소의 추가와 반복추가를 의미하여 편리할때도 있긴하지만, 우리는 산술적인 +, * 를 원하는 경우도 있다. 이럴 경우는 어떻게 할 수 있을까?\n(예제)\n\na=[1,2]\nb=[3,4]\n\na+b = [4,6] 이 되도록 하려면?\n(풀이1)\n\na[0]+b[0] # a의 첫번째 원소를 추출, b의 첫번째 원소를 추출, 둘을 더함 \n\n4\n\n\n\na[1]+b[1] # a의 두번째 원소를 추출, b의 두번째 원소를 추출, 둘을 더함 \n\n6\n\n\n\n[a[0]+b[0],a[1]+b[1]]\n\n[4, 6]\n\n\n풀이가 가능한 이유? a,b는 리스트이지만 a[0], a[1], b[0], b[1] 은 각각 인트형임. 인트형은 + 연산이 가능했음.\n(풀이2)\n\nnumpy 를 이용\n\nnumpy 패키지 (파이썬의 여러 수치연산들을 담당하는 라이브러리)\n\n이러한 벡터연산은 누구나 필요로 하는 연산임.\n내가 아니더라도 누군가가 프로그램화 해놓았을 것임.\n그 누군가가 자신이 만든 코드를 잘 정리하여 무료로 배포했을 수도 있음. (패키지를 배포한다고 표현)\n그 패키지를 우리는 가져와서 설치한뒤 사용하기만 하면된다.\n\n패키지를 설치하는 방법 (코랩은 이미 설치되어 있음)\n\n!pip install numpy # 최신버전을 설치함\n!conda install -c conda-forge numpy -y # 안전한 버전을 설치함\n\n설치된 패키지를 사용하는 방법\n\nimport numpy 한뒤에 numpy.??로 기능을 사용\nimport numpy as np 한뒤에 np.??로 기능을 사용\n\n\nimport numpy as np ## 설치한 numpy라는 패키지를 쓰겠음. 그런데 numpy말고 np라는 이름으로 쓰겠음\n\n\nnp.array(a)\n\narray([1, 2])\n\n\n\na=[1,2]\nb=[3,4]\nnp.array(a)+np.array(b)\n\narray([4, 6])"
  },
  {
    "objectID": "posts/Day1/ls02.html#인덱싱",
    "href": "posts/Day1/ls02.html#인덱싱",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "인덱싱",
    "text": "인덱싱\n- str형과 동일한 방식\n\na=[11,22,33,44,55] # 0 -4 -3 -2 -1\n\n\na[-2:] # 끝의 2개의 원소를 뽑음 \n\n[44, 55]"
  },
  {
    "objectID": "posts/Day1/ls02.html#리스트는-컨테이너형-객체이다.",
    "href": "posts/Day1/ls02.html#리스트는-컨테이너형-객체이다.",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "리스트는 컨테이너형 객체이다.",
    "text": "리스트는 컨테이너형 객체이다.\n- 리스트의 원소는 int, float 따위만 가능한 것이 아니다. (리스트는 컨테이너형 객체이므로)\n\nlst = [1,3.14,True,'a',[1,2], \n       (1,2),{'name':'iu','age':27},{1,2,3}]\n\n\nlst\n\n[1, 3.14, True, 'a', [1, 2], (1, 2), {'name': 'iu', 'age': 27}, {1, 2, 3}]\n\n\n각 원소의 타입을 알아보자.\n\ntype(lst[0])\n\nint\n\n\n\ntype(lst[1])\n\nfloat\n\n\n\ntype(lst[2])\n\nbool\n\n\n\ntype(lst[3])\n\nstr\n\n\n\ntype(lst[4])\n\nlist\n\n\n\ntype(lst[5])\n\ntuple\n\n\n\ntype(lst[6])\n\ndict\n\n\n\ntype(lst[7])\n\nset\n\n\n- str은 컨테이너형이 아니다.\n\n'abcd'[2]\n\n'c'\n\n\n\nstr의 모든 원소는 문자임"
  },
  {
    "objectID": "posts/Day1/ls02.html#리스트는-가변형-객체이다.",
    "href": "posts/Day1/ls02.html#리스트는-가변형-객체이다.",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "리스트는 가변형 객체이다.",
    "text": "리스트는 가변형 객체이다.\n리스트의 원소 수정\n- 리스트의 원소를 수정할 수 있다. (리스트는 가변객체이므로)\n\na=[11,22,33]\na\n\n[11, 22, 33]\n\n\n\na[0]\n\n11\n\n\n\na[0]=111\n\n\na\n\n[111, 22, 33]\n\n\n- 원소수정은 당연한 기능같은데 이것이 불가능한 경우도 있다.\n(가능한경우)\n\na=['g','u','e','b','i','n']\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n\na[0]\n\n'g'\n\n\n\na[0]='G'\n\n\na\n\n['G', 'u', 'e', 'b', 'i', 'n']\n\n\n(불가능한경우)\n\na='guebin'\na\n\n'guebin'\n\n\n\ntype(a)\n\nstr\n\n\n\na[0]\n\n'g'\n\n\n\na[0]='G'\n\nTypeError: 'str' object does not support item assignment\n\n\n리스트의 원소 삭제\n(예제)\n아래와 같이 문자로 된 리스트를 선언하자.\n\na=['g','u','e','b','i','n']\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n사실 더 쉽게 선언할 수 있음\n\na= 'guebin' # string으로 a를 선언\na= list(a) # list(a)를 통하여 str을 ㅣist로 변환 -&gt; 그 결과를 a에 다시 저장\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n리스트의 원소 추가\n(예제) 비어있는 리스트를 만들고 원소 0,1,2를 차례로 추가하여 보자.\n(풀이1)\n\na=[]\na\n\n[]\n\n\n\na= a + [0] \na\n\n[0]\n\n\n\na= a + [1]\na\n\n[0, 1]\n\n\n\na= a + [2]\na\n\n[0, 1, 2]\n\n\n(풀이2)\n\na=[]\na\n\n[]\n\n\n\na += [0] \na\n\n[0]\n\n\n\na += [1]\na\n\n[0, 1]\n\n\n\na += [2]\na\n\n[0, 1, 2]\n\n\n\n암기법: 중복되는 변수를 지우고 연산자의 순서를 바꾼다.\n\n(풀이3) 리스트 특화기능(=메소드)를 이용\n\na=[]\na\n\n[]\n\n\n\na.append(0)\na\n\n[0]\n\n\n\na.append(1)\na\n\n[0, 1]\n\n\n\na.append(2)\na\n\n[0, 1, 2]\n\n\n- a+[4]와 a.append(4)의 차이점은?\n(관찰1)\n\na=[1,2,3]\na+[4] ## 리스트 a와 리스트 [4]의 연산결과를 알려줘 \n\n[1, 2, 3, 4]\n\n\n\na ## a는 그대로임. 변화없음 \n\n[1, 2, 3]\n\n\n(관찰2)\n\na=[1,2,3]\na.append(4)\n\n\na ## a자체가 변화함 \n\n[1, 2, 3, 4]\n\n\n비슷해보이지만 굉장히 미묘한 차이가 있음\na.append(4): a에 4를 append하라 \\(\\to\\) a가 변함\na+[4]: a와 4를 연산하라"
  },
  {
    "objectID": "posts/Day1/ls02.html#list-특수기능",
    "href": "posts/Day1/ls02.html#list-특수기능",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "list 특수기능",
    "text": "list 특수기능\n(append)\n\na=[1,2,3,4]\na.append?\n\n\nSignature: a.append(object, /)\nDocstring: Append object to the end of the list.\nType:      builtin_function_or_method\n\n\n\n\n\na.append(5)\na\n\n[1, 2, 3, 4, 5]\n\n\n(clear)\n\na=[1,2,3,4]\na.clear?\n\n\nSignature: a.clear()\nDocstring: Remove all items from list.\nType:      builtin_function_or_method\n\n\n\n\n\na.clear()\na\n\n[]\n\n\n(copy)\n\na=[1,2,3,4]\na.copy?\n\n\nSignature: a.copy()\nDocstring: Return a shallow copy of the list.\nType:      builtin_function_or_method\n\n\n\n\n\nb=a.copy()\nb\n\n[1, 2, 3, 4]\n\n\n(count)\n\na=[1,1,2,3,3,4,4,4]\na.count?\n\n\nSignature: a.count(value, /)\nDocstring: Return number of occurrences of value.\nType:      builtin_function_or_method\n\n\n\n\n\na.count(1)\n\n2\n\n\n\na.count(2)\n\n1\n\n\n\na.count(3)\n\n2\n\n\n\na.count(4)\n\n3\n\n\n(extend)\n\na=[1,2,3,4]\nb=[-1,-2,-3,-4]\n\n\na.extend(b)\na\n\n[1, 2, 3, 4, -1, -2, -3, -4]\n\n\n\na=[1,2,3,4]\nb=[-1,-2,-3,-4]\n\n\na.append(b)\n\n\na\n\n[1, 2, 3, 4, [-1, -2, -3, -4]]\n\n\n(index)\n\na=[11,22,'a',True, 22,'a']\na.index?\n\n\nSignature: a.index(value, start=0, stop=9223372036854775807, /)\nDocstring:\nReturn first index of value.\nRaises ValueError if the value is not present.\nType:      builtin_function_or_method\n\n\n\n\n\na.index(11)\n\n0\n\n\n\na.index(22)\n\n1\n\n\n\na.index('a')\n\n2\n\n\n\na.index(True)\n\n3\n\n\n(insert)\n\na=[1,2,3]\na.insert?\n\n\nSignature: a.insert(index, object, /)\nDocstring: Insert object before index.\nType:      builtin_function_or_method\n\n\n\n\n\na.insert(1,88) \na\n\n[1, 88, 2, 3]\n\n\n(pop)\n\na=['a',1,2,'d']\na.pop?\n\n\nSignature: a.pop(index=-1, /)\nDocstring:\nRemove and return item at index (default last).\nRaises IndexError if list is empty or index is out of range.\nType:      builtin_function_or_method\n\n\n\n\n\na.pop() # index=-1 이므로 마지막원소가 나타남\n\n'd'\n\n\n\na # a는 마지막 원소가 사라진 상태\n\n['a', 1, 2]\n\n\n\na.pop(0) # index=0 이므로 첫번쨰 원소가 나타남\n\n'a'\n\n\n\na # a에는 첫번째 원소가 사라진 상태\n\n[1, 2]\n\n\n(remove)\n\na=['a',2,3,'d']\na.remove?\n\n\nSignature: a.remove(value, /)\nDocstring:\nRemove first occurrence of value.\nRaises ValueError if the value is not present.\nType:      builtin_function_or_method\n\n\n\n\n\na.remove('d')\n\n\na\n\n['a', 2, 3]\n\n\n\na.remove('a')\n\n\na\n\n[2, 3]\n\n\n(reverse)\n\na=[1,2,3,4]\na.reverse?\n\n\nSignature: a.reverse()\nDocstring: Reverse *IN PLACE*.\nType:      builtin_function_or_method\n\n\n\n\n\na.reverse()\na\n\n[4, 3, 2, 1]\n\n\n(sort)\n\na=[1,3,2,4]\na.sort?\n\n\nSignature: a.sort(*, key=None, reverse=False)\nDocstring:\nSort the list in ascending order and return None.\nThe sort is in-place (i.e. the list itself is modified) and stable (i.e. the\norder of two equal elements is maintained).\nIf a key function is given, apply it once to each list item and sort them,\nascending or descending, according to their function values.\nThe reverse flag can be set to sort in descending order.\nType:      builtin_function_or_method\n\n\n\n\n\na.sort()\na\n\n[1, 2, 3, 4]\n\n\n(다른예제들)\n\na=list('guebin')\na\n\n['g', 'u', 'e', 'b', 'i', 'n']\n\n\n\na.sort()\na\n\n['b', 'e', 'g', 'i', 'n', 'u']\n\n\n\na.sort(reverse=True)\na\n\n['u', 'n', 'i', 'g', 'e', 'b']"
  },
  {
    "objectID": "posts/Day1/ls02.html#중첩-리스트",
    "href": "posts/Day1/ls02.html#중첩-리스트",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "중첩 리스트",
    "text": "중첩 리스트\n\nA=[[1,2,3],[4,5,6],[7,8,9]]\nA\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n- A는 아래와 같은 매트릭스로 이해할 수 있다\n$\n\\[\\begin{bmatrix}\n1 & 2 & 3 \\\\\n4 & 5 & 6 \\\\\n7 & 8 & 9\n\\end{bmatrix}\\]\n$\n- A에서 (2,1)의 원소를 뽑고싶다 = 4를 뽑고싶다\n\nA[1,0]\n\nTypeError: list indices must be integers or slices, not tuple\n\n\n\n실패\n\n\nA[1][0]\n\n4\n\n\n\n성공\n\n- 성공의 이유를 분석해보자.\n\nA\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n\nA[1]\n\n[4, 5, 6]\n\n\n\nA[1][0]\n\n4\n\n\n- 매트릭스는 아니지만 매트릭스 같음! - 1차원 배열을 다차원 배열로 확장할 수 있는 기본 아이디어를 제공함"
  },
  {
    "objectID": "posts/Day1/ls02.html#리스트-vs-튜플",
    "href": "posts/Day1/ls02.html#리스트-vs-튜플",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "리스트 vs 튜플",
    "text": "리스트 vs 튜플\n- 컨테이너형타입이라는 점, 그리고 연산 및 인덱싱을 하는 방법은 리스트와 같음\n\n차이점1: [] 대신에 ()를 사용한다.\n차이점2: 불변형이다. (원소의 값을 바꿀 수 없음)\n차이점3: 하나의 원소를 선언할 때는 (1,)와 같이 해야 한다.\n차이점4: 의미가 명확할때는 튜플의 ()를 생략가능하다.\n\n- 컨테이너형이라는 것이 무슨의미?\n\na=(4,6,'pencil', 3.2+4.6j, [3,4]) \n\n\ntype(a[2])\n\nstr\n\n\n\ntype(a[3])\n\ncomplex\n\n\n- 불변형이라는 것은 무슨의미?\n\na[2] = 'Pencil'\n\nTypeError: 'tuple' object does not support item assignment\n\n\n참고로 a를 튜플이 아니라 리스트로 선언하면 값이 잘 바뀐다.\n\na=[4,6,'pencil', 3.2+4.6j, [3,4]]\n\n\na[2]\n\n'pencil'\n\n\n\na[2]='Pencil'\n\n\na\n\n[4, 6, 'Pencil', (3.2+4.6j), [3, 4]]\n\n\n- 하나의 원소로 이루어진 튜플을 만들때는 쉼표를 붙여야 함.\n\n[1]+[2,3,4]\n\n[1, 2, 3, 4]\n\n\n\n(1,)+(2,3,4)\n\n(1, 2, 3, 4)\n\n\n- 리스트와 중요한 차이점! 의미가 명확할때 튜플의 괄호는 생략가능하다. (이게 중요합니다)\n\na=1,2\na\n\n(1, 2)\n\n\n의미가 명확할때 생략해야함\n\n1,2 + 3,4,5 \n\n(1, 5, 4, 5)\n\n\n\n(1,2) + (3,4,5) \n\n(1, 2, 3, 4, 5)"
  },
  {
    "objectID": "posts/Day1/ls02.html#선언-1",
    "href": "posts/Day1/ls02.html#선언-1",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "선언",
    "text": "선언\n- 소괄호를 이용\n\na=(1,2,3)\na\n\n(1, 2, 3)\n\n\n\ntype(a)\n\ntuple\n\n\n- 생략가능하다는 점이 포인트\n\na=1,2,3\na\n\n(1, 2, 3)\n\n\n\ntype(a)\n\ntuple\n\n\n- 원소가 하나인 튜플을 만들고 싶다면?\n\na=(1,)\na\n\n(1,)"
  },
  {
    "objectID": "posts/Day1/ls02.html#연산-1",
    "href": "posts/Day1/ls02.html#연산-1",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "연산",
    "text": "연산\n- 리스트와 동일\n\n(1,2)+(3,4,5)\n\n(1, 2, 3, 4, 5)\n\n\n\n(1,2)*2\n\n(1, 2, 1, 2)"
  },
  {
    "objectID": "posts/Day1/ls02.html#인덱싱-1",
    "href": "posts/Day1/ls02.html#인덱싱-1",
    "title": "Lesson 02: 파이썬의 자료형 II (list, tuple)",
    "section": "인덱싱",
    "text": "인덱싱\n- 리스트와 동일\n\na=(1,2,3,-4,-5)\na\n\n(1, 2, 3, -4, -5)\n\n\n\na[-1]\n\n-5\n\n\n\na[-3:]\n\n(3, -4, -5)"
  },
  {
    "objectID": "posts/Day3/ls11.html#toy-exam",
    "href": "posts/Day3/ls11.html#toy-exam",
    "title": "Lesson 11: 아이스크림을 많이 먹으면 걸리는 병 (draft)",
    "section": "Toy exam",
    "text": "Toy exam\n- 교재의 예제상황은 예를들면 아래와 같다.\n(숨은진짜상황1)\n\\[\\text{아이스크림 판매량} = 20 + 2 \\times \\text{온도} + \\text{오차}\\]\n\nnp.random.seed(1) \ntemp = np.array([-10.2, -5.2, 0.1, 10.1, 12.2, 14.7, \n                25.4, 26.8, 28.9, 35.1, 32.2, 34.6])\neps = np.random.normal(size=12,scale=5)\nicecream = 20 + temp * 2 + eps\n\n\nplt.plot(temp,icecream,'o')\n\n\n\n\n\n\n\n\n(숨은진짜상황2)\n\\[\\text{소아마비 반응수치} = 30 + 0.5 \\times \\text{온도} + \\text{오차}\\]\n\nnp.random.seed(2) \neps = np.random.normal(size=12,scale=5) \ndisease = 30+ temp * 0.5 + eps\n\n\nplt.plot(temp,disease,'o')\n\n\n\n\n\n\n\n\n(우리가 데이터로부터 관측한 상황)\n- 아이스크림과 질병의 산점도를 그려보자.\n\nplt.plot(icecream,disease,'o')\n\n\n\n\n\n\n\n\n- 아이스크림 중 어떠한 물질이 소아마비를 일으키는것이 분명하므로 (인과성이 분명해보이니까) 아래와 같은 모형을 세우자. &lt;– 여기서부터 틀렸음\n\\[{\\tt disease}_i =\\beta_0 +\\beta_1 {\\tt icecream}_i +\\epsilon_i,\\quad \\textbf{for} ~~ i=1,2,\\dots, 12\\]\n- 적절한 \\(\\beta_0\\)와 \\(\\beta_1\\)을 추정하면 우리는 아이스크림과 소아마비의 관계를 알 수 있다. &lt;– 틀린주장\n\n틀린 모형\n도데체 우리가 뭘 잘못했는가?\n\n- 두 변수 사이에 상관관계가 있어도 실제 원인은 다른 변수에 숨겨져 있는 경우가 많다.\n(ex1)\n\n온도 \\(\\to\\) 익사\n온도 \\(\\to\\) 아이스크림\n아이스크림과 익사자도 양의 상관관계에 있을것이다.\n아이스크림을 먹이면 물에 빠져 죽는다 \\(\\to\\) 틀린주장\n사실 기온이 숨겨진 원인이다. 기온이 증가하면 아이스크림 판매량도 증가하고 폭염때문에 익사사고율도 높아지는 구조이다.\n\n(ex2)\n\n인구수 \\(\\to\\) 교회\n인구수 \\(\\to\\) 범죄건수\n지역별 교회와 범죄건수를 살펴보면 상관관계가 높게 나올것임\n교회를 지으면 범죄건수도 증가한다? \\(\\to\\) 틀린주장\n사실 인구가 숨겨진 요인임\n\n- ex2, ex1에 대하여 바른 분석을 하려면?\n\nex2: 인구가 비슷한 도시끼리 묶어서 비교해보면 교회와 범죄의 건수는 양의 상관관계에 있지 않을것임\nex1: 온도가 비슷한 그룹끼리 묶어보자.\n\n- 올바른 분석: 온도가 비슷한 그룹끼리 묶어서 그려보자. \\(\\to\\) 상관계수가 줄어들 것이다.\n\nplt.plot(icecream[:6],disease[:6],'o')\n\n\n\n\n\n\n\n\n\nplt.plot(icecream[6:],disease[6:],'o')\n\n\n\n\n\n\n\n\n\n진짜로 선형관계가 약해졌다.."
  },
  {
    "objectID": "posts/Day3/ls11.html#자료생성-좀-더-그럴듯한-자료-만들기",
    "href": "posts/Day3/ls11.html#자료생성-좀-더-그럴듯한-자료-만들기",
    "title": "Lesson 11: 아이스크림을 많이 먹으면 걸리는 병 (draft)",
    "section": "자료생성: 좀 더 그럴듯한 자료 (만들기)",
    "text": "자료생성: 좀 더 그럴듯한 자료 (만들기)\n- 지난 시간의 toy example은 데이터가 너무 작아서 억지스러움 \\(\\to\\) 기상자료개방포털, 회원가입해야 자료받을 수 있음.\n\n_df = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/temp.csv')\n_df\n\n\n\n\n\n\n\n\n지점번호\n지점명\n일시\n평균기온(℃)\n최고기온(℃)\n최고기온시각\n최저기온(℃)\n\n\n\n\n0\n146\n전주\n2020-01-01\n-0.5\n4.3\n15:09\n-6.4\n\n\n1\n146\n전주\n2020-01-02\n1.4\n6.5\n14:12\n-3.0\n\n\n2\n146\n전주\n2020-01-03\n2.6\n7.6\n13:32\n-0.5\n\n\n3\n146\n전주\n2020-01-04\n2.0\n7.7\n13:51\n-2.6\n\n\n4\n146\n전주\n2020-01-05\n2.5\n8.6\n14:05\n-3.2\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n651\n146\n전주\n2021-10-13\n19.9\n25.5\n14:29\n15.6\n\n\n652\n146\n전주\n2021-10-14\n20.4\n25.5\n13:36\n17.0\n\n\n653\n146\n전주\n2021-10-15\n18.3\n22.0\n13:47\n15.7\n\n\n654\n146\n전주\n2021-10-16\n12.8\n17.4\n0:01\n6.5\n\n\n655\n146\n전주\n2021-10-17\n6.7\n12.4\n15:18\n2.2\n\n\n\n\n656 rows × 7 columns\n\n\n\n- 평균기온만 선택\n\npd.Series(_df.columns)\n\n0       지점번호\n1        지점명\n2         일시\n3    평균기온(℃)\n4    최고기온(℃)\n5     최고기온시각\n6    최저기온(℃)\ndtype: object\n\n\n\ntemp = np.array(_df.iloc[:,3])\ntemp[:5]\n\narray([-0.5,  1.4,  2.6,  2. ,  2.5])\n\n\n\n# 숨은진짜상황1: 온도 \\(\\to\\) 아이스크림 판매량\n- 아래와 같은 관계가 있다고 하자.\n\\[\\text{아이스크림 판매량} = 20 + 2 \\times \\text{온도} + \\text{오차}\\]\n\nnp.random.seed(1)\neps = np.random.normal(size=len(temp), scale=10) \nicecream = 20 + 2*temp + eps\n\n\nplt.plot(temp,icecream,'o',alpha=0.3)\nplt.xlabel(\"temp\",size=15)\nplt.ylabel(\"icecream\",size=15)\n\nText(0, 0.5, 'icecream')\n\n\n\n\n\n\n\n\n\n\n\n# 숨은진짜상황2: 온도 \\(\\to\\) 소아마비 반응수치\n- 아래와 같은 관계가 있다고 하자.\n\\[\\text{소아마비 반응수치} = 30 + 0.5 \\times \\text{온도} + \\epsilon\\]\n\nnp.random.seed(2) \neps=np.random.normal(size=len(temp),scale=1)\ndisease= 30 + 0.5 * temp + eps\n\n\nplt.plot(temp,disease,'o',alpha=0.3)\nplt.xlabel(\"temp\",size=15)\nplt.ylabel(\"disease\",size=15)\n\nText(0, 0.5, 'disease')\n\n\n\n\n\n\n\n\n\n\n\n# 우리가 관측한 상황 (온도는 은닉되어있음)\n\nplt.plot(icecream,disease,'o',alpha=0.3)\nplt.xlabel(\"icecream\",size=15)\nplt.ylabel(\"disease\",size=15)\n\nText(0, 0.5, 'disease')"
  },
  {
    "objectID": "posts/Day3/ls11.html#직관-여름만-뽑아서-plot-해보자.",
    "href": "posts/Day3/ls11.html#직관-여름만-뽑아서-plot-해보자.",
    "title": "Lesson 11: 아이스크림을 많이 먹으면 걸리는 병 (draft)",
    "section": "직관: 여름만 뽑아서 plot 해보자.",
    "text": "직관: 여름만 뽑아서 plot 해보자.\n- temp&gt;25 (여름으로 간주) 인 관측치만 플랏\n\nplt.plot(icecream[temp&gt;25],disease[temp&gt;25], 'o', color='C1') ## 평균기온이 25도가 넘어가면 여름이라 생각 \n\n\n\n\n\n\n\n\n- 전체적인 산점도\n\nfig , ((ax1,ax2), (ax3,ax4)) = plt.subplots(2,2,figsize=(8,6)) \nax1.plot(temp,icecream,'o',alpha=0.2); ax1.set_xlabel('temp'); ax1.set_ylabel('icecream'); ax1.set_title(\"hidden1\")\nax2.plot(temp,disease,'o',alpha=0.2); ax2.set_xlabel('temp'); ax2.set_ylabel('disease'); ax2.set_title(\"hidden2\")\nax3.plot(icecream,disease,'o',alpha=0.2); ax3.set_xlabel('icecream'); ax3.set_ylabel('disease'); ax3.set_title(\"observed\")\nax4.plot(icecream,disease,'o',alpha=0.2); ax4.set_xlabel('icecream'); ax4.set_ylabel('disease'); ax4.set_title(\"observed\")\nax4.plot(icecream[temp&gt;25],disease[temp&gt;25],'o',label='temp&gt;25')\nax4.legend()\nfig.tight_layout()"
  },
  {
    "objectID": "posts/Day3/ls11.html#ggplot-온도구간을-세분화-하여-시각화",
    "href": "posts/Day3/ls11.html#ggplot-온도구간을-세분화-하여-시각화",
    "title": "Lesson 11: 아이스크림을 많이 먹으면 걸리는 병 (draft)",
    "section": "ggplot: 온도구간을 세분화 하여 시각화",
    "text": "ggplot: 온도구간을 세분화 하여 시각화\n- 목표: 모든 온도구간에 대하여 각각 색을 다르게 하여 그려보자.\n\n사실 지금 변수는 온도, 아이스크림판매량, 소아마비\n온도가 유사한 지역을 색으로 묶으면 3차원 플랏이 가능함\n\n\ndf = pd.DataFrame({'temp':temp,'icecream':icecream,'disease':disease})\ndf\n\n\n\n\n\n\n\n\ntemp\nicecream\ndisease\n\n\n\n\n0\n-0.5\n35.243454\n29.333242\n\n\n1\n1.4\n16.682436\n30.643733\n\n\n2\n2.6\n19.918282\n29.163804\n\n\n3\n2.0\n13.270314\n32.640271\n\n\n4\n2.5\n33.654076\n29.456564\n\n\n...\n...\n...\n...\n\n\n651\n19.9\n68.839992\n39.633906\n\n\n652\n20.4\n76.554679\n38.920443\n\n\n653\n18.3\n68.666079\n39.882650\n\n\n654\n12.8\n42.771364\n36.613159\n\n\n655\n6.7\n30.736731\n34.902513\n\n\n\n\n656 rows × 3 columns\n\n\n\n\nfig = ggplot(df.assign(temp_cut = pd.qcut(df.temp,7)))\npoint = geom_point(aes(x='icecream',y='disease',color='temp_cut'),alpha=0.2)\nline = geom_smooth(aes(x='icecream',y='disease',color='temp_cut'))\nline2 = geom_smooth(aes(x='icecream',y='disease'))\nfig+point+line+line2\n\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n\n\n\n\n\n\n\n\n\n\n각 온도별로 추세선은 거의 기울기가 0이다. \\(\\to\\) 온도가 비슷한 구간별로 묶어서 보니까 상관관계가 없다는 거!\n아이스크림 판매량과 소아마비의 corr은 유의미해보이지만, 온도를 통제하였을 경우 아이스크림 판매량과 소아마비의 partial corr은 유의미해보이지 않음.\n\n\n# 해석\n- 해피앤딩: 온도를 통제하니까 아이스크림과 질병은 관련이 없어보인다. \\(\\to\\) 아이스크림을 먹으면 소아마비를 유발한다는 이상한 결론이 나올뻔 했지만 우리는 온도라는 흑막을 잘 찾았고 결과적으로 “온도-&gt;아이스크림판매량,소아마비” 이라는 합리적인 진리를 얻을 수 있었다.\n\n온도와 같은 변수를 은닉변수라고 한다.\n\n- 또 다른 흑막? 고려할 흑막이 온도뿐이라는 보장이 어디있지? 사실 흑막2, 흑막3이 있어서 그런 흑막들을 고려하다보니까 아이스크림과 소아마비사이의 상관관계가 다시 보이면 어떡하지?\n\n이러한 이유 때문에 상관계수로 인과성을 유추하는건 사실상 불가능.\n그런데 이론적으로는 “세상의 모든 은닉변수를 통제하였을 경우에도 corr(X,Y)의 값이 1에 가깝다면 그때는 인과성이 있다고 봐도 무방함, (물론 이 경우에도 무엇이 원인인지는 통계적으로 따지는것이 불가)” 이라고 주장할 수 있다. 즉 모든 흑막을 제거한다면 “상관성=인과성”이다.\n\n- 실험계획법, 인과추론: 세상의 모든 흑막을 제거하는건 상식적으로 불가능\n\n피셔의주장(실험계획법): 그런데 실험계획을 잘하면 흑막을 제거한 효과가 있음 (무작위로 사람뽑아서 담배를 피우게 한다든가)\n인과추론: 실험계획이 사실상 불가능한 경우가 있음 \\(\\to\\) 모인 데이터에서 최대한 흑막2,3,4,.. 등이 비슷한 그룹끼리 “매칭”을 시킨다!"
  },
  {
    "objectID": "posts/Day3/ls13.html#a.-열의-이름에서-공백제거",
    "href": "posts/Day3/ls13.html#a.-열의-이름에서-공백제거",
    "title": "Lesson 13: 고차원 자료의 시각화",
    "section": "A. 열의 이름에서 공백제거",
    "text": "A. 열의 이름에서 공백제거\n\ndf.columns = [l.replace(' ','') for l in df.columns]\ndf\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClubLogo\n...\nSlidingTackle\nGKDiving\nGKHandling\nGKKicking\nGKPositioning\nGKReflexes\nBestPosition\nBestOverallRating\nReleaseClause\nDefensiveAwareness\n\n\n\n\n0\n212198\nBruno Fernandes\n26\nhttps://cdn.sofifa.com/players/212/198/22_60.png\nPortugal\nhttps://cdn.sofifa.com/flags/pt.png\n88\n89\nManchester United\nhttps://cdn.sofifa.com/teams/11/30.png\n...\n65.0\n12.0\n14.0\n15.0\n8.0\n14.0\nCAM\n88.0\n€206.9M\n72.0\n\n\n1\n209658\nL. Goretzka\n26\nhttps://cdn.sofifa.com/players/209/658/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.com/teams/21/30.png\n...\n77.0\n13.0\n8.0\n15.0\n11.0\n9.0\nCM\n87.0\n€160.4M\n74.0\n\n\n2\n176580\nL. Suárez\n34\nhttps://cdn.sofifa.com/players/176/580/22_60.png\nUruguay\nhttps://cdn.sofifa.com/flags/uy.png\n88\n88\nAtlético de Madrid\nhttps://cdn.sofifa.com/teams/240/30.png\n...\n38.0\n27.0\n25.0\n31.0\n33.0\n37.0\nST\n88.0\n€91.2M\n42.0\n\n\n3\n192985\nK. De Bruyne\n30\nhttps://cdn.sofifa.com/players/192/985/22_60.png\nBelgium\nhttps://cdn.sofifa.com/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.com/teams/10/30.png\n...\n53.0\n15.0\n13.0\n5.0\n10.0\n13.0\nCM\n91.0\n€232.2M\n68.0\n\n\n4\n224334\nM. Acuña\n29\nhttps://cdn.sofifa.com/players/224/334/22_60.png\nArgentina\nhttps://cdn.sofifa.com/flags/ar.png\n84\n84\nSevilla FC\nhttps://cdn.sofifa.com/teams/481/30.png\n...\n82.0\n8.0\n14.0\n13.0\n13.0\n14.0\nLB\n84.0\n€77.7M\n80.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16705\n240558\n18 L. Clayton\n17\nhttps://cdn.sofifa.com/players/240/558/18_60.png\nEngland\nhttps://cdn.sofifa.com/flags/gb-eng.png\n53\n70\nCheltenham Town\nhttps://cdn.sofifa.com/teams/1936/30.png\n...\n12.0\n55.0\n54.0\n52.0\n50.0\n59.0\nGK\n52.0\n€238K\nNaN\n\n\n16706\n262846\n�. Dobre\n20\nhttps://cdn.sofifa.com/players/262/846/22_60.png\nRomania\nhttps://cdn.sofifa.com/flags/ro.png\n53\n63\nFC Academica Clinceni\nhttps://cdn.sofifa.com/teams/113391/30.png\n...\n12.0\n57.0\n52.0\n53.0\n48.0\n58.0\nGK\n53.0\n€279K\n5.0\n\n\n16707\n241317\n21 Xue Qinghao\n19\nhttps://cdn.sofifa.com/players/241/317/21_60.png\nChina PR\nhttps://cdn.sofifa.com/flags/cn.png\n47\n60\nShanghai Shenhua FC\nhttps://cdn.sofifa.com/teams/110955/30.png\n...\n9.0\n49.0\n48.0\n45.0\n38.0\n52.0\nGK\n47.0\n€223K\n21.0\n\n\n16708\n259646\nA. Shaikh\n18\nhttps://cdn.sofifa.com/players/259/646/22_60.png\nIndia\nhttps://cdn.sofifa.com/flags/in.png\n47\n67\nATK Mohun Bagan FC\nhttps://cdn.sofifa.com/teams/113146/30.png\n...\n13.0\n49.0\n41.0\n39.0\n45.0\n49.0\nGK\n47.0\n€259K\n7.0\n\n\n16709\n178453\n07 A. Censori\n17\nhttps://cdn.sofifa.com/players/178/453/07_60.png\nItaly\nhttps://cdn.sofifa.com/flags/it.png\n28\n38\nArezzo\nhttps://cdn.sofifa.com/teams/110907/30.png\n...\nNaN\n7.0\n1.0\n36.0\n6.0\n9.0\nST\n36.0\nNaN\nNaN\n\n\n\n\n16710 rows × 65 columns"
  },
  {
    "objectID": "posts/Day3/ls13.html#b.-결측치제거",
    "href": "posts/Day3/ls13.html#b.-결측치제거",
    "title": "Lesson 13: 고차원 자료의 시각화",
    "section": "B. 결측치제거",
    "text": "B. 결측치제거\n\ndf = df.loc[:,df.isna().mean(axis=0)&lt;0.5].dropna()\ndf\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClubLogo\n...\nSlidingTackle\nGKDiving\nGKHandling\nGKKicking\nGKPositioning\nGKReflexes\nBestPosition\nBestOverallRating\nReleaseClause\nDefensiveAwareness\n\n\n\n\n0\n212198\nBruno Fernandes\n26\nhttps://cdn.sofifa.com/players/212/198/22_60.png\nPortugal\nhttps://cdn.sofifa.com/flags/pt.png\n88\n89\nManchester United\nhttps://cdn.sofifa.com/teams/11/30.png\n...\n65.0\n12.0\n14.0\n15.0\n8.0\n14.0\nCAM\n88.0\n€206.9M\n72.0\n\n\n1\n209658\nL. Goretzka\n26\nhttps://cdn.sofifa.com/players/209/658/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.com/teams/21/30.png\n...\n77.0\n13.0\n8.0\n15.0\n11.0\n9.0\nCM\n87.0\n€160.4M\n74.0\n\n\n2\n176580\nL. Suárez\n34\nhttps://cdn.sofifa.com/players/176/580/22_60.png\nUruguay\nhttps://cdn.sofifa.com/flags/uy.png\n88\n88\nAtlético de Madrid\nhttps://cdn.sofifa.com/teams/240/30.png\n...\n38.0\n27.0\n25.0\n31.0\n33.0\n37.0\nST\n88.0\n€91.2M\n42.0\n\n\n3\n192985\nK. De Bruyne\n30\nhttps://cdn.sofifa.com/players/192/985/22_60.png\nBelgium\nhttps://cdn.sofifa.com/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.com/teams/10/30.png\n...\n53.0\n15.0\n13.0\n5.0\n10.0\n13.0\nCM\n91.0\n€232.2M\n68.0\n\n\n4\n224334\nM. Acuña\n29\nhttps://cdn.sofifa.com/players/224/334/22_60.png\nArgentina\nhttps://cdn.sofifa.com/flags/ar.png\n84\n84\nSevilla FC\nhttps://cdn.sofifa.com/teams/481/30.png\n...\n82.0\n8.0\n14.0\n13.0\n13.0\n14.0\nLB\n84.0\n€77.7M\n80.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16703\n259718\nF. Gebhardt\n19\nhttps://cdn.sofifa.com/players/259/718/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n52\n66\nFC Basel 1893\nhttps://cdn.sofifa.com/teams/896/30.png\n...\n10.0\n53.0\n45.0\n47.0\n52.0\n57.0\nGK\n52.0\n€361K\n6.0\n\n\n16704\n251433\nB. Voll\n20\nhttps://cdn.sofifa.com/players/251/433/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n58\n69\nF.C. Hansa Rostock\nhttps://cdn.sofifa.com/teams/27/30.png\n...\n10.0\n59.0\n60.0\n56.0\n55.0\n61.0\nGK\n58.0\n€656K\n5.0\n\n\n16706\n262846\n�. Dobre\n20\nhttps://cdn.sofifa.com/players/262/846/22_60.png\nRomania\nhttps://cdn.sofifa.com/flags/ro.png\n53\n63\nFC Academica Clinceni\nhttps://cdn.sofifa.com/teams/113391/30.png\n...\n12.0\n57.0\n52.0\n53.0\n48.0\n58.0\nGK\n53.0\n€279K\n5.0\n\n\n16707\n241317\n21 Xue Qinghao\n19\nhttps://cdn.sofifa.com/players/241/317/21_60.png\nChina PR\nhttps://cdn.sofifa.com/flags/cn.png\n47\n60\nShanghai Shenhua FC\nhttps://cdn.sofifa.com/teams/110955/30.png\n...\n9.0\n49.0\n48.0\n45.0\n38.0\n52.0\nGK\n47.0\n€223K\n21.0\n\n\n16708\n259646\nA. Shaikh\n18\nhttps://cdn.sofifa.com/players/259/646/22_60.png\nIndia\nhttps://cdn.sofifa.com/flags/in.png\n47\n67\nATK Mohun Bagan FC\nhttps://cdn.sofifa.com/teams/113146/30.png\n...\n13.0\n49.0\n41.0\n39.0\n45.0\n49.0\nGK\n47.0\n€259K\n7.0\n\n\n\n\n14398 rows × 63 columns"
  },
  {
    "objectID": "posts/Day3/ls13.html#c.-position-칼럼의-변환",
    "href": "posts/Day3/ls13.html#c.-position-칼럼의-변환",
    "title": "Lesson 13: 고차원 자료의 시각화",
    "section": "C. Position 칼럼의 변환",
    "text": "C. Position 칼럼의 변환\n\nposition = df.Position.str.split(\"&gt;\").str[-1]\nposition\n\n0        CAM\n1        LDM\n2         RS\n3        RCM\n4         LB\n        ... \n16703    RES\n16704    RES\n16706    RES\n16707    RES\n16708    SUB\nName: Position, Length: 14398, dtype: object\n\n\n\ndf = df.assign(Position = [k for i in position for k,v in position_dict.items() if i in v])\ndf \n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClubLogo\n...\nSlidingTackle\nGKDiving\nGKHandling\nGKKicking\nGKPositioning\nGKReflexes\nBestPosition\nBestOverallRating\nReleaseClause\nDefensiveAwareness\n\n\n\n\n0\n212198\nBruno Fernandes\n26\nhttps://cdn.sofifa.com/players/212/198/22_60.png\nPortugal\nhttps://cdn.sofifa.com/flags/pt.png\n88\n89\nManchester United\nhttps://cdn.sofifa.com/teams/11/30.png\n...\n65.0\n12.0\n14.0\n15.0\n8.0\n14.0\nCAM\n88.0\n€206.9M\n72.0\n\n\n1\n209658\nL. Goretzka\n26\nhttps://cdn.sofifa.com/players/209/658/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.com/teams/21/30.png\n...\n77.0\n13.0\n8.0\n15.0\n11.0\n9.0\nCM\n87.0\n€160.4M\n74.0\n\n\n2\n176580\nL. Suárez\n34\nhttps://cdn.sofifa.com/players/176/580/22_60.png\nUruguay\nhttps://cdn.sofifa.com/flags/uy.png\n88\n88\nAtlético de Madrid\nhttps://cdn.sofifa.com/teams/240/30.png\n...\n38.0\n27.0\n25.0\n31.0\n33.0\n37.0\nST\n88.0\n€91.2M\n42.0\n\n\n3\n192985\nK. De Bruyne\n30\nhttps://cdn.sofifa.com/players/192/985/22_60.png\nBelgium\nhttps://cdn.sofifa.com/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.com/teams/10/30.png\n...\n53.0\n15.0\n13.0\n5.0\n10.0\n13.0\nCM\n91.0\n€232.2M\n68.0\n\n\n4\n224334\nM. Acuña\n29\nhttps://cdn.sofifa.com/players/224/334/22_60.png\nArgentina\nhttps://cdn.sofifa.com/flags/ar.png\n84\n84\nSevilla FC\nhttps://cdn.sofifa.com/teams/481/30.png\n...\n82.0\n8.0\n14.0\n13.0\n13.0\n14.0\nLB\n84.0\n€77.7M\n80.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16703\n259718\nF. Gebhardt\n19\nhttps://cdn.sofifa.com/players/259/718/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n52\n66\nFC Basel 1893\nhttps://cdn.sofifa.com/teams/896/30.png\n...\n10.0\n53.0\n45.0\n47.0\n52.0\n57.0\nGK\n52.0\n€361K\n6.0\n\n\n16704\n251433\nB. Voll\n20\nhttps://cdn.sofifa.com/players/251/433/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n58\n69\nF.C. Hansa Rostock\nhttps://cdn.sofifa.com/teams/27/30.png\n...\n10.0\n59.0\n60.0\n56.0\n55.0\n61.0\nGK\n58.0\n€656K\n5.0\n\n\n16706\n262846\n�. Dobre\n20\nhttps://cdn.sofifa.com/players/262/846/22_60.png\nRomania\nhttps://cdn.sofifa.com/flags/ro.png\n53\n63\nFC Academica Clinceni\nhttps://cdn.sofifa.com/teams/113391/30.png\n...\n12.0\n57.0\n52.0\n53.0\n48.0\n58.0\nGK\n53.0\n€279K\n5.0\n\n\n16707\n241317\n21 Xue Qinghao\n19\nhttps://cdn.sofifa.com/players/241/317/21_60.png\nChina PR\nhttps://cdn.sofifa.com/flags/cn.png\n47\n60\nShanghai Shenhua FC\nhttps://cdn.sofifa.com/teams/110955/30.png\n...\n9.0\n49.0\n48.0\n45.0\n38.0\n52.0\nGK\n47.0\n€223K\n21.0\n\n\n16708\n259646\nA. Shaikh\n18\nhttps://cdn.sofifa.com/players/259/646/22_60.png\nIndia\nhttps://cdn.sofifa.com/flags/in.png\n47\n67\nATK Mohun Bagan FC\nhttps://cdn.sofifa.com/teams/113146/30.png\n...\n13.0\n49.0\n41.0\n39.0\n45.0\n49.0\nGK\n47.0\n€259K\n7.0\n\n\n\n\n14398 rows × 63 columns"
  },
  {
    "objectID": "posts/Day3/ls13.html#d.-wage-칼럼의-변환",
    "href": "posts/Day3/ls13.html#d.-wage-칼럼의-변환",
    "title": "Lesson 13: 고차원 자료의 시각화",
    "section": "D. Wage 칼럼의 변환",
    "text": "D. Wage 칼럼의 변환\n\ndf = df.assign(Wage = [int(l.replace('€','').replace('K','000')) for l in df.Wage])"
  },
  {
    "objectID": "posts/Day3/ls13.html#e.-시각화",
    "href": "posts/Day3/ls13.html#e.-시각화",
    "title": "Lesson 13: 고차원 자료의 시각화",
    "section": "E. 시각화",
    "text": "E. 시각화\n\nfig = ggplot(df[(df.Position == 'FORWARD') | (df.Position == 'DEFENDER')])\npoint = geom_point(aes(x='ShotPower',y='SlidingTackle',color='Position',size='Wage',alpha='Wage'),position='jitter')\nfig+point"
  },
  {
    "objectID": "posts/Day3/ls15.html#세계지도-그리기",
    "href": "posts/Day3/ls15.html#세계지도-그리기",
    "title": "Lesson 15: 버블차트 애니메이션",
    "section": "세계지도 그리기",
    "text": "세계지도 그리기\n- 기본그리기1\n\npx.scatter_geo()\n\n                                                \n\n\n- 기본그리기2\n\npx.scatter_geo(projection='natural earth')"
  },
  {
    "objectID": "posts/Day3/ls15.html#세계지도-버블",
    "href": "posts/Day3/ls15.html#세계지도-버블",
    "title": "Lesson 15: 버블차트 애니메이션",
    "section": "세계지도 + 버블",
    "text": "세계지도 + 버블\n- 좌표에 점을 찍어보기1\n\ndf=pd.DataFrame({'lat':[0,38],'lon':[0,127],'size':[5,20]})\ndf\n\n\n\n\n\n\n\n\nlat\nlon\nsize\n\n\n\n\n0\n0\n0\n5\n\n\n1\n38\n127\n20\n\n\n\n\n\n\n\n\npx.scatter_geo(df,lat='lat',lon='lon',size='size')\n\n                                                \n\n\n- 좌표에 점을 찍어보기2\n\ndf=pd.DataFrame({'iso_alpha':['KOR','JPN'],'size':[10,2]})\ndf\n\n\n\n\n\n\n\n\niso_alpha\nsize\n\n\n\n\n0\nKOR\n10\n\n\n1\nJPN\n2\n\n\n\n\n\n\n\n\npx.scatter_geo(df,locations='iso_alpha',size='size')"
  },
  {
    "objectID": "posts/Day3/ls15.html#gapminder-data-시각화",
    "href": "posts/Day3/ls15.html#gapminder-data-시각화",
    "title": "Lesson 15: 버블차트 애니메이션",
    "section": "Gapminder data 시각화",
    "text": "Gapminder data 시각화\n- Gapminder\n\n스웨덴 스톡홀름에 등록된 비영리 벤처 기업\nTrendalyzer 소프트웨어를 개발하여 애니메이션 거품 그래프를 생성 \\(\\to\\) 소프트웨어는 2006년, Gapminder의 개발자는 2007년에 글고..\n\n\nhttps://www.youtube.com/watch?v=N91kkT-vC6w\n\n- Gapminder data: 국가별 기대수명, 1인당 GDP, 인구에 대한 데이터 - 특징: 연도별로 정리가 되어있다.\n\ndf = px.data.gapminder()\ndf\n\n\n\n\n\n\n\n\ncountry\ncontinent\nyear\nlifeExp\npop\ngdpPercap\niso_alpha\niso_num\n\n\n\n\n0\nAfghanistan\nAsia\n1952\n28.801\n8425333\n779.445314\nAFG\n4\n\n\n1\nAfghanistan\nAsia\n1957\n30.332\n9240934\n820.853030\nAFG\n4\n\n\n2\nAfghanistan\nAsia\n1962\n31.997\n10267083\n853.100710\nAFG\n4\n\n\n3\nAfghanistan\nAsia\n1967\n34.020\n11537966\n836.197138\nAFG\n4\n\n\n4\nAfghanistan\nAsia\n1972\n36.088\n13079460\n739.981106\nAFG\n4\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1699\nZimbabwe\nAfrica\n1987\n62.351\n9216418\n706.157306\nZWE\n716\n\n\n1700\nZimbabwe\nAfrica\n1992\n60.377\n10704340\n693.420786\nZWE\n716\n\n\n1701\nZimbabwe\nAfrica\n1997\n46.809\n11404948\n792.449960\nZWE\n716\n\n\n1702\nZimbabwe\nAfrica\n2002\n39.989\n11926563\n672.038623\nZWE\n716\n\n\n1703\nZimbabwe\nAfrica\n2007\n43.487\n12311143\n469.709298\nZWE\n716\n\n\n\n\n1704 rows × 8 columns\n\n\n\n- 2007년만 추출\n\ndf.query('year==2007')\n\n\n\n\n\n\n\n\ncountry\ncontinent\nyear\nlifeExp\npop\ngdpPercap\niso_alpha\niso_num\n\n\n\n\n11\nAfghanistan\nAsia\n2007\n43.828\n31889923\n974.580338\nAFG\n4\n\n\n23\nAlbania\nEurope\n2007\n76.423\n3600523\n5937.029526\nALB\n8\n\n\n35\nAlgeria\nAfrica\n2007\n72.301\n33333216\n6223.367465\nDZA\n12\n\n\n47\nAngola\nAfrica\n2007\n42.731\n12420476\n4797.231267\nAGO\n24\n\n\n59\nArgentina\nAmericas\n2007\n75.320\n40301927\n12779.379640\nARG\n32\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1655\nVietnam\nAsia\n2007\n74.249\n85262356\n2441.576404\nVNM\n704\n\n\n1667\nWest Bank and Gaza\nAsia\n2007\n73.422\n4018332\n3025.349798\nPSE\n275\n\n\n1679\nYemen, Rep.\nAsia\n2007\n62.698\n22211743\n2280.769906\nYEM\n887\n\n\n1691\nZambia\nAfrica\n2007\n42.384\n11746035\n1271.211593\nZMB\n894\n\n\n1703\nZimbabwe\nAfrica\n2007\n43.487\n12311143\n469.709298\nZWE\n716\n\n\n\n\n142 rows × 8 columns\n\n\n\n- 시각화예시1: (x,y) = (lon,lat) = locations\n\npx.scatter_geo(\n    data_frame = df.query('year==2007'),\n    locations= 'iso_alpha'\n)\n\n                                                \n\n\n- 시각화예시2: (x,y) = (lon,lat) = locations, size= pop\n\npx.scatter_geo(\n    data_frame = df.query('year==2007'),\n    locations= 'iso_alpha',\n    size='pop'\n)\n\n                                                \n\n\n- 시각화예시3: (x,y) = (lon,lat) = locations, size= pop, color= continent\n\npx.scatter_geo(\n    data_frame = df.query('year==2007'),\n    locations= 'iso_alpha',\n    size='pop',\n    color='continent'\n)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]